<?xml version="1.0"?>
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
  PopUpAnchor 组件用于定位布局中的弹出控件或下拉控件，例如 DropDownList 组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="popUp"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:PopUpAnchor&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:PopUpAnchor
 
    <strong>Properties</strong>
    displayPopUp="false"
    popUp=""
    popUpHeightMatchesAnchorHeight="false"
    popUpPosition="topLeft"
    popUpWidthMatchesAnchorWidth="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  PopUpAnchor 组件用于定位布局中的弹出控件或下拉控件，例如 DropDownList 组件。因为弹出或下拉列表控件是由 PopUpManager 添加到显示列表中的，所以它通常不会参与布局。PopUpAnchor 组件是添加到容器并设置布局的 UIComponent。因此，它负责相对于它自己调整弹出或下拉列表控件的大小并将其定位。它没有视觉外观。
 
  <p>PopUpAnchor 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="PopUpAnchorExample.mxml"><swfblock conref="examples/PopUpAnchorExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.components:PopUpAnchor:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
      构造函数
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:PopUpAnchor:protected:calculatePopUpPosition"><apiName>calculatePopUpPosition</apiName><shortdesc>
      定位 popUp 控件时、显示它时或调用 updatePopUpTransform() 时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>全局坐标系中 <codeph>popUp</codeph> 控件的绝对位置。  
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn></apiOperationDef><apiDesc>
      定位 <codeph>popUp</codeph> 控件时、显示它时或调用 <codeph>updatePopUpTransform()</codeph> 时调用。覆盖此函数以改变 <codeph>popUp</codeph> 控件的位置。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:PopUpAnchor:updatePopUpTransform"><apiName>updatePopUpTransform</apiName><shortdesc>
      更新 popUp 控件的转换矩阵。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      更新 <codeph>popUp</codeph> 控件的转换矩阵。通常情况下，在对 PopUpAnchor 产生效果时调用此函数。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:PopUpAnchor:popUpPosition:set"><apiName>popUpPosition</apiName><shortdesc>
      popUp 控件打开时的位置，与 PopUpAnchor 组件有关。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>PopUpPosition.TOP_LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>popUp</codeph> 控件打开时的位置，与 PopUpAnchor 组件有关。可能的值为 <codeph>"left"、“"right"、"above"、"below"、"center"</codeph> 和 <codeph>"topLeft"</codeph>。
     
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#PopUpPosition"><linktext>spark.components.PopUpPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:PopUpAnchor:displayPopUp:set"><apiName>displayPopUp</apiName><shortdesc>
      如果为 true，则将 popUp 控件添加到 PopUpManager 中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 true，则将 <codeph>popUp</codeph> 控件添加到 PopUpManager 中。如果为 false，则删除它。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUp:set"><apiName>popUp</apiName><shortdesc>
      打开 PopUpAnchor 时要添加到 PopUpManager 中的 IFlexDisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      打开 PopUpAnchor 时要添加到 PopUpManager 中的 IFlexDisplayObject。如果 <codeph>popUp</codeph> 控件实现了 IFocusManagerContainer，则 <codeph>popUp</codeph> 控件将拥有其自己的 FocusManager。如果用户使用 Tab 键在各控件之间导航，则仅访问 <codeph>popUp</codeph> 控件中的控件。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpHeightMatchesAnchorHeight:set"><apiName>popUpHeightMatchesAnchorHeight</apiName><shortdesc>
      如果为 true，则将 popUp 控件的高度设置为 PopUpAnchor 的高度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 true，则将 <codeph>popUp</codeph> 控件的高度设置为 PopUpAnchor 的高度值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpWidthMatchesAnchorWidth:set"><apiName>popUpWidthMatchesAnchorWidth</apiName><shortdesc>
      如果为 true，则将 popUp 控件的宽度设置为 PopUpAnchor 的宽度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 true，则将 <codeph>popUp</codeph> 控件的宽度设置为 PopUpAnchor 的宽度值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:List"><apiName>List</apiName><shortdesc>
  List 控件可显示垂直项目列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:selectionColor">
  </description>
<default>0xA8C6EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropIndicatorSkin" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  <codeph/>
 
  </description>
<default>spark.skins.spark.ListDropIndicator
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dragIndicatorClass" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  必须为 <codeph>IFlexDisplayObject</codeph> 类型。
 
  <p>如果该类实现 <codeph>ILayoutManagerClient</codeph> 接口，则实例将由 DragManager 进行验证。</p>
 
  <p>如果该类实现 <codeph>IVisualElement</codeph> 接口，则实例的 <codeph>owner</codeph> 属性将设置为启动拖动的 List。</p>
 
  <p>AIR DragManager 对实例拍摄快照，而非 AIR DragManager 直接使用该实例。</p>
 
  </description>
<default>spark.components.supportClasses.ListItemDragProxy
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的透明度。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的边框的可见性。
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description>
  此组件的边框的颜色。
 
   </description>
<default>0#CCCCCC
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的边框的 Alpha。
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropIndicator" owner="spark.components:List" playerVersion="Flash10" required="false" type="flash.display.DisplayObject" var_type="mx.core:IFactory">
<description>
      拖放指示符的大小和位置由布局确定，以大致确定在 List 上拖动时的插入位置。
     
      <p><codeph/></p>
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="scroller" owner="spark.components:List" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      用于滚动 List 的可选 Scroller。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:List&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:List
    <strong>Properties</strong>
    allowMultipleSelection="false"
    dragEnabled="false"
    dragMoveEnabled="false"
    dropEnabled="false"
    selectedIndices="null"
    selectedItems="null"
    useVirtualLayout="true"
 
    <strong>Styles</strong>
    alternatingItemColors="undefined"
    borderAlpha="1.0"
    borderColor="0#CCCCCC"
    borderVisible="true"
    contentBackgroundColor="0xFFFFFF"
    dragIndicator="ListItemDragProxy"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  List 控件可显示垂直项目列表。其功能与 HTML 中 SELECT 表单元素的功能非常相似。如果包含的项目太多无法同时显示，则会显示一个垂直滚动条，以便用户可访问列表中的所有项目。可以选择使用水平滚动条，以便用户在列表项目的整个宽度不适合时查看项目。用户可以根据 <codeph>allowMultipleSelection</codeph> 属性的值从列表中选择一个或多个项目。
 
  </apiDesc><example conref="ListExample.mxml"><swfblock conref="examples/ListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ListSkin"><linktext>spark.skins.spark.ListSkin</linktext></link></related-links><apiConstructor id="spark.components:List:List"><apiName>List</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:List:addDragData"><apiName>addDragData</apiName><shortdesc>
      作为拖放操作的一部分，将所选项目添加到 DragSource 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragSource</apiItemName><apiType value="mx.core:DragSource"/><apiDesc>在其中添加数据的 DragSource 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      作为拖放操作的一部分，将所选项目添加到 DragSource 对象。覆盖此方法可将其它数据添加到拖动源。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      调整选定索引以说明正添加到此组件或正从此组件中删除的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>新索引。
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果已将项目添加到组件，则为 <codeph>true</codeph>；如果已删除项目，则为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整选定索引以说明正添加到此组件或正从此组件中删除的项目。 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelectionAndCaretUponNavigation"><apiName>adjustSelectionAndCaretUponNavigation</apiName><shortdesc>
      根据遇到的键击或键击组合，调整所选项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>遇到 Keyboard 事件
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据遇到的键击或键击组合，调整所选项。将键击向下发送到布局，向上发送到布局的 getNavigationDestinationIndex() 方法，以根据当前处于焦点的项确定导航到的索引。索引确定后，单个选择、caret 项以及（如有必要）多项选择都会排列好，以反映新选择的项。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:copyItemWithUID"><apiName>copyItemWithUID</apiName><shortdesc>
      通过调用 ObjectUtil.copy() 方法为此对象制作一个深层副本，然后通过调用 UIDUtil.createUID() 方法用一个新值替代该副本的 uid 属性（如果存在）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>对象的副本。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要复制的项目。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通过调用 <codeph>ObjectUtil.copy()</codeph> 方法为此对象制作一个深层副本，然后通过调用 <codeph>UIDUtil.createUID()</codeph> 方法用一个新值替代该副本的 <codeph>uid</codeph> 属性（如果存在）。
     
      <p>此方法用于拖放副本。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.utils.ObjectUtil.xml"><linktext>mx.utils.ObjectUtil</linktext></link><link href="" invalidHref="mx.utils.UIDUtil.xml"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:createDragIndicator"><apiName>createDragIndicator</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IFlexDisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      <codeph/><codeph/> 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:createDropIndicator"><apiName>createDropIndicator</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
	  <codeph/>
	 
	  </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/destroyDropIndicator"><linktext/></link></related-links></apiOperation><apiOperation id="spark.components:List:destroyDropIndicator"><apiName>destroyDropIndicator</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc> 
	 
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
	  
	 
	  </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/createDropIndicator"><linktext/></link></related-links></apiOperation><apiOperation id="spark.components:List:ensureIndexIsVisible"><apiName>ensureIndexIsVisible</apiName><shortdesc>
      滚动数据项以使其可见的简便处理方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>数据项的索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      滚动数据项以使其可见的简便处理方法。如果指定索引的数据项为完全显示，List 将滚动，直到数据项显示出来。如果数据项已显示出来，则不会发生任何其它滚动。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:findKey"><apiName>findKey</apiName><shortdesc>
      尝试在数据提供程序中查找下一个以 eventCode 参数中的字符开头的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果找到匹配项，则为 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventCode</apiItemName><apiType value="int"/><apiDesc>键盘上按下的键。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      尝试在数据提供程序中查找下一个以 <codeph>eventCode</codeph> 参数中的字符开头的项目。您可以覆盖此方法以执行联想式预键入查找。搜索从 <codeph>selectedIndex</codeph> 位置开始；如果到达数据提供程序的末端，则将从起始处开始。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:findString"><apiName>findString</apiName><shortdesc>
      根据 String 查找列表中的项目，并将所选内容移至该项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果找到匹配项，则为 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>str</apiItemName><apiType value="String"/><apiDesc>匹配的 String。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据 String 查找列表中的项目，并将所选内容移至该项目。搜索从 <codeph>selectedIndex</codeph> 位置开始；如果到达数据提供程序的末端，则将从起始处开始。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:List:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      如果为 true，则会启用多重选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则会启用多项选择。在运行时进行切换时，会清除当前选择。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      一个标志，指示是否可以将项目拖出此控件并放到其它控件上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否可以将项目拖出此控件并放到其它控件上。如果设置为 <codeph>true</codeph>，则表示可以在该控件中进行拖动。如果 <codeph>dropEnabled</codeph> 属性同样设置为 <codeph>true</codeph>，您就可以在该控件中拖放项目进行重新排序。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      一个标志，指示在拖放操作过程中是否可以移动控件中的项目，而不只是从控件中复制这些项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示在拖放操作过程中是否可以移动控件中的项目，而不只是从控件中复制这些项目。如果此属性设置为 <codeph>true</codeph>，<codeph>dragEnabled</codeph> 属性设置为 <codeph>true</codeph>，就可以移动项目。通常情况下，不能或不应移除数据提供程序中的项目，因此在拖放过程中不应允许移动操作。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      一个标志，指示是否可以将所拖动的项目放到此控件上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否可以将所拖动的项目放到此控件上。
     
      <p>如果将此属性设置为 <codeph>true</codeph>，则该控件将接受所有数据格式，并假定所拖动的数据与数据提供程序中数据的格式相匹配。如果要显式检查正在拖动的数据的数据格式，您必须处理一个或多个拖动事件（如 <codeph>dragEnter</codeph> 和 <codeph>dragOver</codeph>），并调用 DragEvent 的 <codeph>preventDefault()</codeph> 方法来自定义列表类接受拖放数据的方式。</p>
     
      <p>将 <codeph>dropEnabled</codeph> 设置为 <codeph>true</codeph> 时，Flex 会自动调用 <codeph>showDropFeedback()</codeph> 和 <codeph>hideDropFeedback()</codeph> 方法来显示拖放指示符。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      表示当前选定的一个或多个项目的索引的 int 的 Vector。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示当前选定的一个或多个项目的索引的 int 的 Vector。如果已通过将 <codeph>allowMultipleSelection</codeph> 设置为 <codeph>false</codeph> 来禁用多项选择，且已设置此属性，则会选择与 Vector 中第一个索引相对应的数据项目。  
     
      <p>如果通过将 <codeph>allowMultipleSelection</codeph> 设置为 <codeph>true</codeph> 来启用多项选择，该属性将包含选定索引列表，其中选定索引按选择顺序的相反顺序列出。这表示 Vector 中第一个元素与选定的最后一项相对应。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      表示当前选定数据项目的 Object 的 Vector。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示当前选定数据项目的 Object 的 Vector。如果已通过将 <codeph>allowMultipleSelection</codeph> 设置为 <codeph>false</codeph> 来禁用多项选择，且已设置此属性，则会选择与 Vector 中第一个项目相对应的数据项目。  
     
      <p>如果通过将 <codeph>allowMultipleSelection</codeph> 设置为 <codeph>true</codeph> 来启用多项选择，该属性将包含选定项列表，其中选定索引按选择顺序的相反顺序列出。这表示 Vector 中第一个元素与选定的最后一项相对应。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      
      设置与此控件相关联的布局的 useVirtualLayout 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      设置与此控件相关联的布局的 <codeph>useVirtualLayout</codeph> 属性的值。如果该布局随后被替换，且此属性的值为 <codeph>true</codeph>，则会将新布局的 <codeph>useVirtualLayout</codeph> 属性设置为 <codeph>true</codeph>。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataRenderer
    <strong>Properties</strong>
    data=""
  
    <strong>Events</strong>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
   
   <p><b/></p>
   </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:DataRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataRenderer:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DataRenderer:data:get"><apiName>data</apiName><shortdesc>
      由 IDataRenderer 接口定义的 data 属性实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      由 IDataRenderer 接口定义的 <codeph>data</codeph> 属性实现。
      
      <p>此属性为 Bindable；它分派“dataChange”事件</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TextArea"><apiName>TextArea</apiName><shortdesc>
  TextArea 是一个文本输入控件，供用户输入和编辑多行各种格式的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><skinStates><SkinState name="disabled" owner="spark.components:TextArea" playerVersion="Flash10">
<description>
  禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:TextArea" playerVersion="Flash10">
<description>
  正常状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style.verticalScrollPolicy">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style.horizontalScrollPolicy">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:TextArea" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="scroller" owner="spark.components:TextArea" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      外观中的可选 Scroller，用于滚动 RichEditableText。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TextArea&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TextArea
    <strong>Properties</strong>
    heightInLines=""
    textFlow="24"
    widthInChars=""
  
    <strong>Styles</strong>
    horizontalScrollPolicy="<i>No default</i>"
    symbolColor=""
    verticalScrollPolicy="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextArea 是一个文本输入控件，供用户输入和编辑多行各种格式的文本。它可以显示水平和垂直滚动条，以便能够对文本进行滚动，并支持使用鼠标滚轮垂直滚动。
 
  <p>它不包含任何用于更改文本格式的用户界面，但是包含可以用于以编程方式设置文本格式的 API。例如，可以创建一个按钮，当单击该按钮时，选定文本可变为粗体。</p>
 
  <p>Spark 版本的 TextArea 使用 Text Layout Framework (TLF) 库，该库基于 Flash Player 10 中的 Flash Text Engine (FTE)。组合后，可以在这些层上使用高质量的国际印刷效果和布局编辑文本。早期 MX 版本的 TextArea 使用旧版 TextField 类显示文本。</p>
 
  <p>Spark TextArea 控件和 MX TextArea 控件之间的最重要区别如下所示：
  <ul>
    <li>Spark TextArea 可提供更佳的印刷效果和文本布局，且能更好地支持各国语言。</li>
    <li>Spark TextArea 有面向对象模型的富文本，但 MX 版本却没有。</li>
    <li>在显示大量文本时，Spark TextArea 性能表现得更好。</li>
    <li>Spark TextArea 嵌入字体的方式与 MX 版本不同。要了解如何在嵌入字体时使用 <codeph>embedAsCFF</codeph> 属性，请参阅 <i>Using Flex </i> 中的“Using embedded fonts”主题。</li>
  </ul></p>
 
  <p>Spark TextArea 控件使用 TLF 面向对象模型的富文本，其中，诸如分段、段落、范围、超链接和图像等文本布局元素在运行时由 ActionScript 对象表示。可以通过编程方式访问或操纵这些对象。TLF 中用于表示富文本的中心对象是 TextFlow。通过将 TextArea 控件的 <xref href="TextArea.html#textFlow">textFlow</xref> 属性设置为 TextFlow 实例，来指定该控件的富文本。</p>
 
  <p>如果不需要显示含有多种格式的文本，请将 TextArea 的 <codeph>text</codeph> 属性设置为纯文本字符串。有关 <codeph>text</codeph> 属性和 <codeph>textFlow</codeph> 属性如何进行交互（例如，可以设置一个属性，然后获取另一个属性）的信息，请参阅这两个属性的描述。</p>
 
  <p>编译时，可以将 TLF 标记标签放在 TextArea 标签内，如下例所示：
  <pre>
  &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:TextArea>
  </pre>
  在此示例中，MXML 编译器设置了 TextArea 的 <codeph>content</codeph> 属性，从而导致基于所指定的 <xref href="../../flashx/textLayout/elements/FlowElement.html">FlowElements</xref> 创建 <xref href="../../flashx/textLayout/elements/TextFlow.html">TextFlow</xref> 对象。</p>
 
  <p>默认文本格式由 CSS 样式确定，例如 <xref href="supportClasses/SkinnableTextBase.html#style:fontFamily">fontFamily</xref> 和 <xref href="supportClasses/SkinnableTextBase.html#style:fontSize">fontSize</xref>。TextFlow 对象中的任何格式信息都会覆盖 CSS 样式确定的默认格式。</p>
 
  <p>可以使用样式控制 TextArea 内容的许多特征。以下是一些常用示例：</p>
 
  <ul><li>使用 <codeph>lineHeight</codeph> 样式控制行间距。</li>
  <li>使用 <codeph>paragraphSpaceBefore</codeph> 和 <codeph>paragraphSpaceAfter</codeph> 样式控制段间距。</li>
  <li>使用 <codeph>textAlign</codeph> 和 <codeph>textAlignLast</codeph> 样式将文本对齐或两端对齐。</li>
  <li>使用 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> 和 <codeph>paddingBottom</codeph> 样式从控件的边框插入文本。</li>
  </ul>
 
  <p>默认情况下，文本在控件的右边缘换行。如果文本超出了 TextArea 范围，会自动显示垂直滚动条。如果将 <codeph>lineBreak</codeph> 样式设置为<codeph>“explicit”</codeph>，则仅在显式换行符开始新行。如果在 <codeph>text</codeph> 中使用 CR（<codeph>“\r”</codeph>）、LF（<codeph>“\n”</codeph>）或 CR+LF（<codeph>“\r\n”</codeph>），或者在 TLF 标记中使用 <codeph>&lt;p></codeph> 和 <codeph>&lt;br/></codeph>，也会产生相同的效果。在这些情况下，如果任何文本行宽于控件，都会自动显示水平滚动条。</p>
 
  <p>通过 <codeph>widthInChars</codeph> 和 <codeph>heightInChars</codeph> 属性，可以采用缩放字体大小的方式指定 TextArea 的宽度和高度。还可以指定显式宽度或高度像素值，或者使用宽度和高度百分比值或各种约束（例如 <codeph>left</codeph> 和 <codeph>right</codeph> 或 <codeph>top</codeph> 和 <codeph>bottom</codeph>）。</p>
 
  <p>可以使用 <codeph>maxChars</codeph> 属性限制用户可以输入的字符数，使用 <codeph>restrict</codeph> 限制用户可以输入的字符。</p>
 
  <p>该控件是可设置外观的控件，其外观使用 RichEditableText 控件显示并编辑文本，使用 Scroller 控件提供滚动条。可以通过 <codeph>textDisplay</codeph> 形式访问 RichEditableText，通过 <codeph>scroller</codeph> 形式访问 Scroller。</p>
 
  <p>Spark TextArea 可以显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语语句中的法语语句）。如果文本的主要书写方向为从右到左，可以将 <codeph>direction</codeph> 样式设置为<codeph>“rtl”</codeph>。<codeph>textAlign</codeph> 样式默认为<codeph>“start”</codeph>，这样，当 <codeph>direction</codeph> 为<codeph>“ltr”</codeph>时，文本左对齐；当 <codeph>direction</codeph> 为<codeph>“rtl”</codeph>时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为<codeph>“end”</codeph>。</p>
 
  <p>Spark TextArea 还支持在一个编辑会话内执行无限次撤消/重做操作。编辑会话在控件获得键盘焦点时启动，在控件失去焦点时结束。</p>
 
  <p>TextArea 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>188 个像素宽 × 149 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>36 个像素宽 × 36 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.TextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea/text"><linktext>text</linktext></link><link href="spark.components.xml#TextArea/textFlow"><linktext>textFlow</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link><link href="spark.skins.spark.xml#TextAreaSkin"><linktext>spark.skins.spark.TextAreaSkin</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link></related-links><apiConstructor id="spark.components:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TextArea:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>String 的 Vector（用于指定所请求格式的名称），或 <codeph>null</codeph>（用于请求所有格式）。
     
      </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>一个字符位置，用于指定所选内容的固定末尾。
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>一个字符位置，用于指定所选内容的可移动末尾。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="spark.components.RichEditableText#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TextArea:content:get"><apiName>content</apiName><shortdesc>
      该属性旨在编译时用于 MXML；在运行时获得或设置富文本内容并改用 textFlow 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      该属性旨在编译时用于 MXML；在运行时获得或设置富文本内容并改用 <codeph>textFlow</codeph> 属性。Adobe 建议运行时使用 <codeph>textFlow</codeph> 属性获得或设置富文本内容，因为它是 TextFlow（而不是 Object）的强类型。在 Text Layout Framework 中，TextFlow 是富文本内容的规范表示。
     
      <p><codeph>content</codeph> 属性是 TextArea 的默认属性，因此可以编写 MXML 成如下形式
      <pre>
      &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World&lt;/s:span>&lt;/s:TextArea>
      </pre>
      且可以将指定为内容的 String 和 SpanElement 用于创建 TextFlow。</p>
     
      <p>该属性的类型为 Object，因为可以将其设置为 String、FlowElement 或 String 和 FlowElement 的 Array。在上述示例中，内容为二元数组。第一个数组元素是字符串“Hello”。第二个数组元素是含有粗体文本“World”的 SpanElement 对象。</p>
     
      <p>无论指定内容的方式为何，内容都会转换为 TextFlow 对象。当获得该属性的值时，即获得生成的 TextFlow 对象。</p>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:heightInLines:get"><apiName>heightInLines</apiName><shortdesc conref="spark.components.RichEditableText#heightInLines">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#heightInLines">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:textFlow:get"><apiName>textFlow</apiName><shortdesc conref="spark.components.RichEditableText#textFlow">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#textFlow">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:widthInChars:get"><apiName>widthInChars</apiName><shortdesc conref="spark.components.RichEditableText#widthInChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#widthInChars">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer2"><apiName>VideoPlayer2</apiName><shortdesc>
  VideoPlayer 控件是一个可设置外观的视频播放器，它支持渐进式下载、多比特率流和流视频。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><DefaultProperty name="source"/><skinStates><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的已禁用状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackErrorAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="bufferingAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="pausedAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的播放状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="readyAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="initializingAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
   
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitializedAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  VideoPlayer 的已禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackError" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="buffering" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="paused" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  VideoPlayer 的播放状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="initializing" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
   
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer2" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Number">
<description>
  在隐藏视频播放控件之前，在没有用户交互的情况下，在全屏模式下等待的时间（以毫秒为单位）。
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="videoDisplay" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="true" var_type="spark.components:VideoDisplay">
<description>
      
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="currentTimeDisplay" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      切换全屏模式按钮的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      静音按钮的可选外观部件。静音按钮具有一个 <codeph>muted</codeph> 属性和一个 <codeph>volume</codeph> 属性。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      暂停按钮的可选外观部件
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      播放按钮的可选外观部件
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      所有播放器控件的可选外观部件。该外观用于确定播放器处于全屏模式时需要隐藏的内容，且没有用户交互。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      播放/暂停按钮的可选外观部件。播放视频时，会将选定属性设置为 <codeph>true</codeph>。暂停或停止视频时，会将选定属性设置为 <codeph>false</codeph>。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      拖拉条（时间轴）的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      停止按钮的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="durationDisplay" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      音量控制的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
 
    <strong>Properties</strong>
    autoPlay="true"
    autoRewind="true"
    loop="false"
    scaleMode="letterbox"
    muted="false"
    source=""
    volume="1"
  
    <strong>Events</strong>
    close="<i>No default</i>"
    complete="<i>No default</i>"
    metadataReceived="<i>No default</i>"
    playheadUpdate="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoPlayer 控件是一个可设置外观的视频播放器，它支持渐进式下载、多比特率流和流视频。它支持播放 FLV 和 F4v 文件。VideoPlayer 控件包含控制视频播放的全能 UI。
 
  <p><codeph/></p>
   <p>VideoPlayer 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>263 个像素宽 × 184 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VideoDisplay"><linktext/></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer2_org.osmf.events.DurationChangeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.DurationChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph/>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer2_org.osmf.events.PlayheadChangeEvent.PLAYHEAD_CHANGE_playheadChange"><apiName>playheadChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.PlayheadChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph/><codeph/>
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer2_org.osmf.events.PlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer2_flash.events.ProgressEvent_bytesDownloadedChange"><apiName>bytesDownloadedChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent</apiEventType><adobeApiEventClassifier>org.osmf.events.BytesDownloadedChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer2:VideoPlayer2"><apiName>VideoPlayer2</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer2:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的时间值
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>要设置格式的时间值（以秒为单位）
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer2:pause"><apiName>pause</apiName><shortdesc conref="spark.components.VideoDisplay#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>    
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer2:play"><apiName>play</apiName><shortdesc conref="spark.components.VideoDisplay#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer2:seek"><apiName>seek</apiName><shortdesc conref="spark.components.VideoDisplay#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>seconds
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer2:stop"><apiName>stop</apiName><shortdesc conref="spark.components.VideoDisplay#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer2:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.components.VideoDisplay#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.components.VideoDisplay#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.components.VideoDisplay#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.components.VideoDisplay#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:currentTime:get"><apiName>currentTime</apiName><shortdesc conref="spark.components.VideoDisplay#currentTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#currentTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:duration:get"><apiName>duration</apiName><shortdesc conref="spark.components.VideoDisplay#duration">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#duration">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:loop:get"><apiName>loop</apiName><shortdesc conref="spark.components.VideoDisplay#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:muted:get"><apiName>muted</apiName><shortdesc conref="spark.components.VideoDisplay#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:playing:get"><apiName>playing</apiName><shortdesc conref="spark.components.VideoDisplay#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.VideoDisplay#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.components.VideoDisplay#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>letterbox
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#scaleMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:source:get"><apiName>source</apiName><shortdesc conref="spark.components.VideoDisplay#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:volume:get"><apiName>volume</apiName><shortdesc conref="spark.components.VideoDisplay#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#volume">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRenderer"><apiName>IItemRenderer</apiName><shortdesc>
  IItemRenderer 接口定义基本 API 集，类必须实现这些 API 才能创建可以与主机组件通信的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IItemRenderer 接口定义基本 API 集，类必须实现这些 API 才能创建可以与主机组件通信的项呈示器。主机组件（如 List 或 ButtonBar 控件）必须实现 IItemRendererOwner 接口。 
   
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRendererOwner"><linktext>spark.components.IItemRendererOwner</linktext></link></related-links><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph/>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      要在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      要在项呈示器中显示的 String。 
           <p>项呈示器的主机组件可以使用 <codeph>itemToLabel()</codeph> 方法将数据项目转换为 String 以便项呈示器可以将其显示。 </p>
     
      <p>对于诸如 List 和 ButtonBar 等控件，可以使用 <codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 属性指定包含 String 的数据项目的字段。否则，主机组件使用 <codeph>toString()</codeph> 方法将数据项目转换为 String。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      如果项呈示器可以将其自身显示为已选中，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果项呈示器可以将其自身显示为已选中，则包含 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      如果项目渲染器可以将其自身显示为已获取焦点，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果项目渲染器可以将其自身显示为已获取焦点，则包含 <codeph>true</codeph>。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
  VideoPlayer 控件是一个可设置外观的视频播放器，它支持渐进式下载、多比特率流和流视频。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><DefaultProperty name="source"/><skinStates><SkinState name="stopped" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的已停止状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的播放状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的加载状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="stoppedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的已停止状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的播放状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loadingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的加载状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disconnectedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的已断开状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的已禁用状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="connectionErrorAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的连接错误状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disconnected" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的已断开状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的已禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="connectionError" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的连接错误状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  在隐藏视频播放控件之前，在没有用户交互的情况下，在全屏模式下等待的时间（以毫秒为单位）。
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="videoElement" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="true" var_type="spark.primitives:VideoElement">
<description>
      定义 VideoElement 的必需外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playheadTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      要显示当前 playheadTime 的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      切换全屏模式按钮的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      静音按钮的可选外观部件。静音按钮具有一个 <codeph>muted</codeph> 属性和一个 <codeph>volume</codeph> 属性。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      暂停按钮的可选外观部件
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      播放按钮的可选外观部件
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      所有播放器控件的可选外观部件。该外观用于确定播放器处于全屏模式时需要隐藏的内容，且没有用户交互。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      播放/暂停按钮的可选外观部件。播放视频时，会将选定属性设置为 <codeph>true</codeph>。暂停或停止视频时，会将选定属性设置为 <codeph>false</codeph>。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      拖拉条（时间轴）的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      停止按钮的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="totalTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      要显示 totalTime 的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      音量控制的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
  
    <strong>Properties</strong>
    autoPlay="true"
    autoRewind="false"
    enabled=""
    loop="false"
    maintainAspectRatio="true"
    muted="false"
    source=""
    volume=".75"
  
    <strong>Events</strong>
    close="<i>No default</i>"
    complete="<i>No default</i>"
    metadataReceived="<i>No default</i>"
    playheadUpdate="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoPlayer 控件是一个可设置外观的视频播放器，它支持渐进式下载、多比特率流和流视频。它支持播放 FLV 和 F4v 文件。VideoPlayer 控件包含控制视频播放的全能 UI。
 
  <p><codeph>VideoElement</codeph> 是无边框版本。</p>
   <p>VideoPlayer 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>263 个像素宽 × 184 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.primitives.xml#VideoElement"><linktext>spark.primitives.VideoElement</linktext></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  加载视频并准备显示时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.READY</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  加载视频并准备显示时分派。
   <p>使用 <codeph>play()</codeph> 或 <codeph>load()</codeph> 方法加载新的 FLV 后，当 VideoPlayer 首次进入响应状态时分派此事件。它为每个加载的 FLV 分派一次。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  根据已加载的字节数指示完成的进度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  根据已加载的字节数指示完成的进度。当加载开始时开始分派，并当已加载所有字节或存在网络错误时结束分派。每隔 0.25 秒分派一次，从调用 load 时开始，到已加载所有字节或者出现网络错误时结束。使用此事件可以检查已加载的字节数或缓冲区中的字节数。 
   <p>仅针对渐进式 HTTP 下载进行分派。  根据已加载的字节数指示进度。  事件对象具有 <codeph>bytesLoaded</codeph> 和 <codeph>bytesTotal</codeph> 属性</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><shortdesc>
  视频播放时每隔 0.25 秒分派一次。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  视频播放时每隔 0.25 秒分派一次。除非发生搜索，否则当暂停或停止此事件时，不会分派它。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><shortdesc>
  第一次到达 FLV 文件的元数据时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  第一次到达 FLV 文件的元数据时分派。事件对象具有一个 <codeph>info</codeph> 属性，该属性包含 <codeph>NetStream.onMetaData</codeph> 事件回调接收的 info 对象。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 因为播放器到达 FLV 文件的末尾而完成播放时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.COMPLETE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 因为播放器到达 FLV 文件的末尾而完成播放时进行分派。如果您调用 <codeph>stop()</codeph> 或 <codeph>pause()</codeph> 方法或者单击相应的控件，则组件将不会分派该事件。 
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  通过超时、调用 close() 方法或加载新的视频流来关闭 NetConnection 时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  通过超时、调用 <codeph>close()</codeph> 方法或加载新的视频流来关闭 <codeph>NetConnection</codeph> 时分派。仅可以使用 RTMP 流分派此事件，而从不可使用 HTTP 流分派此事件。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      将时间值（以秒为单位）的格式设置为用于 playheadTimeDisplay 和 totalTimeDisplay 的字符串。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的时间值
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>要设置格式的时间值（以秒为单位）
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将时间值（以秒为单位）的格式设置为用于 playheadTimeDisplay 和 totalTimeDisplay 的字符串。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:pause"><apiName>pause</apiName><shortdesc conref="spark.primitives.VideoElement#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果尚未加载该外观且不存在 videoElement。    
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.primitives.VideoElement#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:play"><apiName>play</apiName><shortdesc conref="spark.primitives.VideoElement#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果尚未加载该外观且不存在 videoElement。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.primitives.VideoElement#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:seek"><apiName>seek</apiName><shortdesc conref="spark.primitives.VideoElement#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果尚未加载该外观且不存在 videoElement。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>秒
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.primitives.VideoElement#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:stop"><apiName>stop</apiName><shortdesc conref="spark.primitives.VideoElement#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果尚未加载该外观且不存在 videoElement。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.primitives.VideoElement#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.primitives.VideoElement#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.primitives.VideoElement#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:loop:get"><apiName>loop</apiName><shortdesc conref="spark.primitives.VideoElement#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:maintainAspectRatio:get"><apiName>maintainAspectRatio</apiName><shortdesc conref="spark.primitives.VideoElement#maintainAspectRatio">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#maintainAspectRatio">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:muted:get"><apiName>muted</apiName><shortdesc conref="spark.primitives.VideoElement#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playWhenHidden:get"><apiName>playWhenHidden</apiName><shortdesc conref="spark.primitives.VideoElement#playWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#playWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playheadTime:get"><apiName>playheadTime</apiName><shortdesc conref="spark.primitives.VideoElement#playheadTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#playheadTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playing:get"><apiName>playing</apiName><shortdesc conref="spark.primitives.VideoElement#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:source:get"><apiName>source</apiName><shortdesc conref="spark.primitives.VideoElement#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:totalTime:get"><apiName>totalTime</apiName><shortdesc conref="spark.primitives.VideoElement#totalTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#totalTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc conref="spark.primitives.VideoElement#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#volume">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:enabled:set"><apiName>enabled</apiName><shortdesc>
      
     
      将 enabled 设置为 false 后，将禁用该 UI 并暂停播放视频（如果该视频当前正在播放）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
     
      将 enabled 设置为 <codeph>false</codeph> 后，将禁用该 UI 并暂停播放视频（如果该视频当前正在播放）。重新启用该组件不会再继续播放视频，您必须显式调用 <codeph>play()</codeph>。
     
      <p>即使该组件在禁用时的最初状态为暂停，但如果希望在禁用时播放音频或执行其它操作，仍可以通过调用方法（如 <codeph>play()</codeph>）来执行此操作。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  ButtonBar 控件定义一组具有普通外观和导航的且在逻辑上相关的水平按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="firstButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     定义第一个按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="lastButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     定义最后一个按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="middleButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="true" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     定义中间按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ButtonBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ButtonBar
   /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBar 控件定义一组具有普通外观和导航的且在逻辑上相关的水平按钮。
   <p>按钮栏的典型用途是将一组相关按钮组合到一起，提供共同的外观和导航，并在一个位置处理 <codeph>change</codeph> 事件的逻辑。 </p>
   <p>ButtonBar 控件可基于其 <codeph>dataProvider</codeph> 属性的值创建 Button 控件。使用诸如 <codeph>addItem()</codeph> 和 <codeph>removeItem()</codeph> 等方法可操纵 <codeph>dataProvider</codeph> 属性以添加和删除数据项目。ButtonBar 控件会根据对 <codeph>dataProvider</codeph> 属性所做的更改自动添加或删除必要的子项。</p>
   <p>可以使用 ButtonBar 控件设置 ViewStack 容器的活动子代，如下例所示：</p>
  
  <pre>
  &lt;s:ButtonBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Application"><apiName>Application</apiName><shortdesc>
  Flex 将定义一个默认容器（或 Application 容器）。这样，您无需显式定义其它容器即可向应用程序中添加内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="direction"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Application" playerVersion="Flash9" type="uint">
<description>
  应用程序的背景色。将此颜色用作应用程序的舞台颜色和 HTML 嵌入标签的背景色。
   
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Application" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      定义容器控件栏区域外观的外观部件。默认情况下，ApplicationSkin 类定义以灰色背景显示在 Application 容器内容区域顶部的控件栏区域。 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Application
    <strong>Properties</strong>
    backgroundColor="0xFFFFFF"
    colorCorrection="default"
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    frameRate="24"
    pageTitle""
    preloader="<i>No default</i>"
    preloaderBaseColor="<i>No default</i>"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    usePreloader="true"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
  
    <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex 将定义一个默认容器（或 Application 容器）。这样，您无需显式定义其它容器即可向应用程序中添加内容。
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  当 HTTPService 调用失败时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 HTTPService 调用失败时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  在 Application 经过初始化、由 LayoutManager 处理并附加到显示列表后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 Application 经过初始化、由 LayoutManager 处理并附加到显示列表后分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Application:Application"><apiName>Application</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Application:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      
      返回要应用到外观的状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>指定要应用到外观的状态的名称的字符串。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      
      返回要应用到外观的状态的名称。例如，一个 Button 组件可能会返回 String“up”、“down”、“over”或“disabled”以指定该状态。
     
      <p>SkinnableComponent 的子类必须覆盖此方法才可返回值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Application:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      
      正删除外观部件的实例时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      正删除外观部件的实例时调用。不要直接调用此方法。对于静态部件，Flex 会在调用 <codeph>detachSkin()</codeph> 方法时自动调用此方法。对于动态部件，Flex 会在调用 <codeph>removeDynamicPartInstance()</codeph> 方法时自动调用此方法。 
     
      <p>覆盖此函数以从该部件删除行为。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        指定应用程序的帧速率。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
      
      </apiDefaultValue></apiValueDef><apiDesc>
        指定应用程序的帧速率。
     
        <p>注意：无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        指定在浏览器的标题栏中显示的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
        指定在浏览器的标题栏中显示的字符串。此属性与 HTML<codeph>&lt;title></codeph> 标签提供相同的功能。
     
        <p>注意：无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。MXML 代码中设置的值是为了供某个工具使用而设计的，用于更新随 SDK 提供的 HTML 模板。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloader"><apiName>preloader</apiName><shortdesc>
      指定用于定义自定义进度栏的 SWC 组件类或 ActionScript 组件类的路径。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      指定用于定义自定义进度栏的 SWC 组件类或 ActionScript 组件类的路径。SWC 组件必须与 MXML 文件位于同一目录下，或者位于 Flex Web 应用程序的 WEB-INF/flex/user_classes 目录下。
     
      <p>注意：无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloaderBaseColor"><apiName>preloaderBaseColor</apiName><shortdesc>
      指定默认预下载器组件所使用的基本颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
      指定默认预下载器组件所使用的基本颜色。此属性具有与 Spark 外观所用的 <codeph>baseColor</codeph> 样式相同的效果。通常应将此属性设置为与 Application 容器的 <codeph>baseColor</codeph> 样式属性相同的值。
        
      <p>注意：无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        指定在播放器停止播放前，Flash Player 或 AIR 调用堆栈的最大深度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc>
        指定在播放器停止播放前，Flash Player 或 AIR 调用堆栈的最大深度。这实质上是堆栈溢出限制。
     
        <p>注意：无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        指定在 Flash Player 或 AIR 假定 ActionScript 事件处理函数是挂起的因而终止该程序之前，该程序可执行的最长持续时间（以秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
        指定在 Flash Player 或 AIR 假定 ActionScript 事件处理函数是挂起的因而终止该程序之前，该程序可执行的最长持续时间（以秒为单位）。您可以设置的最大允许值是 60 秒。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        如果设置为 true，则指定为显示应用程序 preloader。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
        如果设置为 <codeph>true</codeph>，则指定为显示应用程序 preloader。
     
        <p>注意：无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:colorCorrection:get"><apiName>colorCorrection</apiName><shortdesc>
     舞台的 colorCorrection 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ColorCorrection.DEFAULT
    
     </apiDefaultValue></apiValueDef><apiDesc>
     舞台的 <codeph>colorCorrection</codeph> 属性的值。如果此应用程序无权访问舞台的 <codeph>colorCorrection</codeph> 属性，则 <codeph>colorCorrection</codeph> 属性的值为 <codeph>null</codeph>。
     
     <p>仅允许主应用程序设置 <codeph>colorCorrection</codeph> 属性。如果嵌套应用程序需要设置 color correction 属性，则它必须通过引用主应用程序的实例进行设置。</p>
    
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.ColorCorrection.xml"><linktext>flash.display.ColorCorrection</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      包含在 Application 容器控件栏区域中的组件集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      包含在 Application 容器控件栏区域中的组件集。Application 容器控件栏区域的位置和外观由 spark.skins.spark.ApplicationSkin 类确定。默认情况下，ApplicationSkin 类定义以灰色背景显示在 Application 容器内容区域顶部的控件栏区域。创建自定义外观以更改控件栏的默认外观。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      定义容器控件栏区域的布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      定义容器控件栏区域的布局。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/>
     
      <p><b/><codeph/></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      包含表示提供给此 Application 的参数的名称-值对的 Object。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      包含表示提供给此 Application 的参数的名称-值对的 Object。
     
      <p>可以使用 for-in 循环来提取 parameters Object 中的所有名称和值。</p>
     
      <p>参数有两个源：Application 的 URL 中的查询字符串和 FlashVars HTML 参数（仅适用于主 Application）的值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:url:get"><apiName>url</apiName><shortdesc>
      从中加载此应用程序的 SWF 文件的 URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      从中加载此应用程序的 SWF 文件的 URL。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      可以从中查看应用程序源的 URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      可以从中查看应用程序源的 URL。通过设置此属性，可以将“查看源”菜单项插入到应用程序的默认上下文菜单中。选择此菜单项将在新窗口中打开 <codeph>viewSourceURL</codeph>。
     
      <p>您必须使用 MXML（而非 ActionScript）设置 <codeph>viewSourceURL</codeph> 属性，如以下示例所示：</p>
     
      <pre>
        &lt;Application viewSourceURL="http://path/to/source">
          ...
        &lt;/Application></pre>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Label"><apiName>Label</apiName><shortdesc>
  Label 是可以呈示一行或多行统一格式文本的低级 UIComponent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="text"/><styles><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#verticalAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingTop">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingBottom">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineBreak">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:Label" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:Label" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Label 是可以呈示一行或多行统一格式文本的低级 UIComponent。要显示的文本由从 TextBase 继承的 <codeph>text</codeph> 属性确定。文本格式由元素的 CSS 样式指定，例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>。
 
  <p>Label 是 Flex 4 的新功能，它采用 Flash Player 10 中的 Flash Text Engine (FTE) 新版本来提供高质量的国际印刷效果。因为 Label 运行速度快且占用内存少，所以它特别适合用于涉及显示一些小型非交互式文本的情况，例如项呈示器、Botton 外观中的标签等。</p>
 
  <p>Spark 体系结构提供三个文本“原型”（Label、RichText 和 RichEditableText）作为其“仅在用户需要时支付”基本原理的一部分。Label 运行速度最快且占用内存最少，但其功能有限：无复杂格式、不可滚动、不可选择、不可编辑且无超链接。RichText 和 RichEditableText 基于 Text Layout Framework (TLF) 库，而不是 FTE。RichText 新增了使用复杂格式程示 HTML 等富文本的功能，但仍然完全是非交互式的。RichEditableText 运行速度最慢且占用内存最多，但可以执行所有功能：支持使用虚拟化 TextLine 进行滚动、选择、编辑、超链接、从 URL 加载图像等。您应该使用能够满足需求的最快速的文本原型。</p>
 
  <p>spark.components.Label 与旧版 MX 控件 mx.controls.Label 相似。要了解的最重要区别有
  <ul>
    <li>Spark Label 使用 FTE（即播放器的新文本引擎），而 MX Label 使用已废弃的 TextField 类。</li>
    <li>与 MX Label 相比，Spark Label 可提供更佳的印刷效果，且能更好地支持各国语言。</li>
    <li>Spark Label 可以显示多行，但 MX Label 不可以。</li>
    <li>MX Label 可以显示 HTML 的有限子集，但 Spark Label 只能显示统一格式的文本。</li>
    <li>MX Label 可以设置为可选择的，但 Spark Label 不可以。</li>
  </ul></p>
 
  <p>在 Spark Label 中，将以下三个字符序列识别为显式换行符：CR（<codeph>“\r”</codeph>）、LF（<codeph>“\n”</codeph>）和 CR+LF（<codeph>“\r\n”</codeph>）。</p>
 
  <p>如果没有为 Label 指定任何类型的宽度，则由这些显式换行符确定的最长行将确定 Label 的宽度。</p>
 
  <p>如果确实指定了某种类型的宽度，则指定的文本将在组件边界的右边缘换行，因为 <codeph>lineBreak</codeph> 样式的默认值为<codeph>“toFit”</codeph>。如果文本扩展到低于组件底部，则将被剪切。</p>
 
  <p>要禁用此自动换行，请将 <codeph>lineBreak</codeph> 样式设置为<codeph>“explicit”</codeph>。这样的话，只有 <codeph>text</codeph> 包含显式换行符时才换行，且将剪切超过右边缘的行尾。</p>
 
  <p>如果文本超出了显示这些文本的空间，Label 可以截断文本。截断文本意味着使用截断指示符（如 "..."）替换超额文本。请参阅继承的属性 <codeph>maxDisplayedLines</codeph> 和 <codeph>isTruncated</codeph>。</p>
 
  <p>可以使用 <codeph>lineHeight</codeph> 样式控制行间距。可以使用 <codeph>textAlign</codeph>、<codeph>textAlignLast</codeph> 和 <codeph>verticalAlign</codeph> 样式水平和垂直对齐元素范围内的文本。可以使用 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> 和 <codeph>paddingBottom</codeph> 样式从元素边缘插入文本。</p>
 
  <p>默认情况下，Label 没有背景，但是可以使用 <codeph>backgroundColor</codeph> 和 <codeph>backgroundAlpha</codeph> 样式绘制一个背景。不支持边框。如果需要边框或更复杂的背景，请在 Label 后面使用单独的图形元素，例如 Rect。</p>
 
  <p>Label 支持显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语段落中的法语语句）。如果文本的主要书写方向为从右到左，可以将 <codeph>direction</codeph> 样式设置为<codeph>“rtl”</codeph>。<codeph>textAlign</codeph> 样式默认为<codeph>“start”</codeph>，这样，当 <codeph>direction</codeph> 为<codeph>“ltr”</codeph>时，文本左对齐；当 <codeph>direction</codeph> 为<codeph>“rtl”</codeph>时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为<codeph>“end”</codeph>。</p>
 
  <p>Label 在 Flash Text Engine 中使用 TextBlock 类创建一个或多个 TextLine 对象，以采用由其 CSS 样式确定的格式静态显示其文本 String。由于性能原因，其 TextLine 不包含有关各个字型的信息；有关更多信息，请参阅 flash.text.engine.TextLineValidity.STATIC。</p>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link></related-links><apiConstructor id="spark.components:Label:Label"><apiName>Label</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Label:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
  RichEditableText 为低级的 UIComponent，用于显示、滚动、选择和编辑各种格式的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="baseColor"/><DefaultProperty name="content"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  此组件的整个边界矩形的背景色。如果此样式为 <codeph>undefined</codeph>，则不绘制任何背景。否则，此 RGB 颜色是使用由 <codeph>backgroundAlpha</codeph> 样式确定的 Alpha 级别绘制的。
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  由 <codeph>backgroundColor</codeph> 样式定义的颜色的 Alpha 级别。有效值范围是 0.0 到 1.0。
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  启用组件但组件没有焦点时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnGap">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnCount" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnCount">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#verticalAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingTop">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingBottom">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineBreak">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>flash.text.engine:ITextSupport</apiBaseInterface><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichEditableText 为低级的 UIComponent，用于显示、滚动、选择和编辑各种格式的文本。
 
  <p>富文本可以包含可单击的超链接以及可嵌入或从 URL 加载的内嵌图形。</p>
 
  <p>RichEditableText 不包含滚动条，但是可以实现用于以编程方式滚动的 IViewport 接口，这样可以由确实能够提供滚动条的 Scroller 控制。它还支持使用鼠标滚轮垂直滚动。</p>
 
  <p>它不包括用于更改文本格式的任何用户界面。但是，它提供了可以通过编程方式执行此操作的 API；例如，这些 API 可以创建使所选文本变成粗体的 Bold 按钮。</p>
 
  <p>该类用于 Spark 版本的 TextInput 和 TextArea 的外观。（TextInput 不显示处理富文本的功能，但 TextArea 可以。）默认情况下，RichEditableText 具有透明背景，但不支持绘制边框。</p>
 
  <p>RichEditableText 是 Flex 4 的新功能，它采用新的 Text Layout Framework （TLF) 库，该库又基于 Flash Player 10 中的 Flash Text Engine (FTE) 新版本。组合后，可以在这些层上使用高质量的国际印刷效果和布局编辑文本。</p>
 
  <p>Spark 体系结构提供三个文本“原型”（Label、RichText 和 RichEditableText）作为其“仅在用户需要时支付”基本原理的一部分。Label 运行速度最快且占用内存最少，因为它仅使用 FTE，没有 TLF，但其功能有限：无富文本、不可滚动、不可选择、不可编辑。RichText 新增了使用复杂布局显示富文本的功能，但仍然完全是非交互式的。RichEditableText 运行速度最慢且占用内存最多，但是提供 TLF 可以执行的大部分功能。您应该使用能够满足需求的最快速的文本原型。</p>
 
  <p>RichEditableText 与用于 MX 组件的 UITextField 类相似。该类不使用 FTE 或 TLF，而是扩展了 Player 中的旧版 TextField 类。</p>
 
  <p>要了解的最重要区别有：
  <ul>
    <li>RichEditableText 可提供更佳的印刷效果和文本布局，且能更好地支持各国语言。</li>
    <li>RichEditableText 包含面向对象模型的富文本，而 UITextField 不包含。</li>
    <li>在显示大量文本时，RichEditableText 性能表现得更好。</li>
    <li>RichEditableText 嵌入字体的方式与 UITextField 不同。嵌入字体时，请有关有关如何使用 <codeph>embedAsCFF</codeph> 属性的文档。</li>
  </ul></p>
 
  <p>RichEditableText 使用 TLF 面向对象模型的富文本，其中，诸如分段、段落、范围、超链接和图像等文本布局元素在运行时由 ActionScript 对象表示，可以通过编程方式访问和操纵该对象。TLF 中用于表示富文本的中心对象是 TextFlow，因此可以通过将要显示的 RichEditableText 的 <codeph>textFlow</codeph> 属性设置为 TextFlow 实例，来指定其富文本。有关如何创建 TextFlow（例如通过导入 TLF 标记）的信息，请参阅 <codeph>textFlow</codeph> 属性的描述。如果不需要显示含有多种格式的文本，仅将 <codeph>text</codeph> 属性设置为纯文本字符串。有关 <codeph>text</codeph> 属性和 <codeph>textFlow</codeph> 属性如何进行交互（例如，可以设置一个属性，然后获取另一个属性）的信息，请参阅这两个属性的描述。</p>
 
  <p>编译时，仅可以将 TLF 标记标签放在 RichEditableText 标签内，如下例所示
  <pre>
  &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichEditableText>
  </pre>
  在此示例中，MXML 编译器设置了 <codeph>content</codeph> 属性，从而导致基于所指定的 FlowElement 自动创建 TextFlow。</p>
 
  <p>默认文本格式由 CSS 样式确定，例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>。TextFlow 中的任何格式信息都会覆盖 CSS 样式确定的默认格式。</p>
 
  <p>使用 <codeph>lineHeight</codeph> 样式可以控制行间距；使用 <codeph>paragraphSpaceBefore</codeph> 和 <codeph>paragraphSpaceAfter</codeph> 样式可以控制段间距。可以使用 <codeph>textAlign</codeph> 和 <codeph>textAlignLast</codeph> 样式将文本对齐或两端对齐。可以使用 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> 和 <codeph>paddingBottom</codeph> 样式从组件边缘插入文本。</p>
 
  <p>默认情况下，RichEditableText“自动调整大小”：不包含任何文本启动时非常小，随着文本的输入，其宽度不断增大直到 <codeph>maxWidth</codeph>，按 Enter 键开始新行时其高度增加。</p>
 
  <p>通过 <codeph>widthInChars</codeph> 和 <codeph>heightInChars</codeph> 属性，可以很方便地采用缩放字体大小的方式指定宽度和高度。当然，还可以指定显式宽度或高度像素值，或者使用宽度和高度百分比值或各种约束（例如 <codeph>left</codeph> 和 <codeph>right</codeph> 或 <codeph>top</codeph> 和 <codeph>bottom</codeph>）。</p>
 
  <p>当指定某种类型的宽度（无论是显式宽度或百分比宽度、<codeph>maxWidth</codeph> 还是 <codeph>left</codeph> 和 <codeph>right</codeph> 约束）时，文本在组件右边缘换行且文本在超出范围时可垂直滚动查看。如果将 <codeph>lineBreak</codeph> 样式设置为<codeph>“explicit”</codeph>，则仅在显式换行符开始新行，例如，在 <codeph>text</codeph> 中使用 CR（<codeph>“\r”</codeph>）、LF（<codeph>“\n”</codeph>）或 CR+LF（<codeph>“\r\n”</codeph>）的情况，或者在 TLF 标记中使用 <codeph>&lt;p></codeph> 或 <codeph>&lt;br></codeph> 的情况。在这些情况下，如果任何文本行的宽度超出了控件的范围，则可以水平滚动查看文本。</p>
 
  <p>可以使用 <codeph>maxChars</codeph> 属性限制用户可以输入的字符数，使用 <codeph>restrict</codeph> 限制用户可以输入的字符。</p>
 
  <p><codeph>multiline</codeph> 属性确定了按 Enter 键后发生的操作。如果为 <codeph>true</codeph>，则按 Enter 键会开始一个新段落。如果为 <codeph>false</codeph>，则导致分派 <codeph>FlexEvent.ENTER</codeph> 事件。</p>
 
  <p>如果不希望文本可编辑，请将 <codeph>editable</codeph> 属性设置为 <codeph>false</codeph>。如果甚至不希望文本可以进行选择，请将 <codeph>selectable</codeph> 属性设置为 <codeph>false</codeph>。</p>
 
  <p>因为 RichEditableText 使用 TLF，所以它支持显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语语句中的法语语句）。如果文本的主要书写方向为从右到左，可以将 <codeph>direction</codeph> 样式设置为<codeph>“rtl”</codeph>。<codeph>textAlign</codeph> 样式默认为<codeph>“start”</codeph>，这样，当 <codeph>direction</codeph> 为<codeph>“ltr”</codeph>时，文本左对齐；当 <codeph>direction</codeph> 为<codeph>“rtl”</codeph>时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为<codeph>“end”</codeph>。</p>
 
  <p>此外，使用 TLF 后，RichEditableText 还支持在一个编辑会话内执行无限次撤消/重做操作。编辑会话在组件获得键盘焦点时启动，在组件失去焦点时结束。</p>
 
  <p>RichEditableText 使用 TLF 的 TextContainerManager 类处理文本显示、滚动、选择和编辑。</p>
 
  </apiDesc><example conref="RichEditableTextExample.mxml"><swfblock conref="examples/RichEditableTextExample.swf"/></example><example conref="externalTextFlow.xml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link></related-links><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  如果 multiline 属性为 false，当用户按 Enter 键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  如果 <codeph>multiline</codeph> 属性为 false，当用户按 Enter 键时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  在用户编辑操作完成之后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在用户编辑操作完成后分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  在用户编辑操作发生前分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在用户编辑操作发生前分派。可以更改该操作，或取消该事件以防止该操作被处理。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  在 selectionAnchorPosition 和/或 selectionActivePosition 属性因任意原因而更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  出于任何原因在 <codeph>selectionAnchorPosition</codeph> 和/或 <codeph>selectionActivePosition</codeph> 属性已更改后分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RichEditableText:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:RichEditableText:appendText"><apiName>appendText</apiName><shortdesc>
      将指定文本追加到 RichEditableText 的结尾，就好像您已在该结尾处单击并键入它一样。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>要追加的文本。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将指定文本追加到 RichEditableText 的结尾，就好像您已在该结尾处单击并键入它一样。
     
      <p>随后会在新文本之后设置插入点。如有必要，文本将滚动，以确保插入点可见。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc>
      返回 TextLayoutFormat 对象，用于为指定范围的字符指定格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>String 的 Vector（用于指定所请求格式的名称），或 <codeph>null</codeph>（用于请求所有格式）。
     
      </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>一个字符位置，用于指定所选内容的固定末尾。
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>一个字符位置，用于指定所选内容的可移动末尾。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回 TextLayoutFormat 对象，用于为指定范围的字符指定格式。
     
      <p>如果格式在整个范围上设置不一致，则其值将为 <codeph>undefined</codeph>。</p>
     
      <p>可以为包含所需格式名称的 String 指定 Vector；如果不指定，将计算所有格式。</p>
      
      <p>如果不指定范围，则将使用选定范围。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc>
      
      返回要添加到视域的当前 horizontalScrollPosition 的数量，以按请求的滚动单位进行滚动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>要添加到 <codeph>horizontalScrollPosition</codeph> 的像素数目。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>要滚动的数量。单位的值必须是以下 spark.core.NavigationUnit 常量之一：<codeph>LEFT</codeph>、<codeph>RIGHT</codeph>、<codeph>PAGE_LEFT</codeph>、<codeph>PAGE_RIGHT</codeph>、<codeph>HOME</codeph> 或 <codeph>END</codeph>。要按单列滚动，请使用 <codeph>LEFT</codeph> 或 <codeph>RIGHT</codeph>。要滚动到第一列或最后一列，请使用 <codeph>HOME</codeph> 或 <codeph>END</codeph>。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回要添加到视域的当前 <codeph>horizontalScrollPosition</codeph> 的数量，以按请求的滚动单位进行滚动。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc>
      
      返回要添加到视域的当前 verticalScrollPosition 的数量，以按请求的滚动单位进行滚动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>要添加到 <codeph>verticalScrollPosition</codeph> 的像素数目。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>要滚动的数量。单位的值必须是以下 spark.core.NavigationUnit 常量之一：<codeph>UP</codeph>、<codeph>DOWN</codeph>、<codeph>PAGE_UP</codeph>、<codeph>PAGE_DOWN</codeph>、<codeph>HOME</codeph> 或 <codeph>END</codeph>。要按单行滚动，请使用 <codeph>UP</codeph> 或 <codeph>DOWN</codeph>。要滚动到第一行或最后一行，请使用 <codeph>HOME</codeph> 或 <codeph>END</codeph>。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回要添加到视域的当前 <codeph>verticalScrollPosition</codeph> 的数量，以按请求的滚动单位进行滚动。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:insertText"><apiName>insertText</apiName><shortdesc>
      将指定的文本插入到 RichEditableText，就好像您已键入它一样。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>要插入的文本。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将指定的文本插入到 RichEditableText，就好像您已键入它一样。
     
      <p>如果选择范围，新文本将替换所选文本。如果有插入点，将在该点插入新文本。</p>
     
      <p>随后会在新文本之后设置插入点。如有必要，文本将滚动，以确保插入点可见。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectAll"><apiName>selectAll</apiName><shortdesc>
      选择所有文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      选择所有文本。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectRange"><apiName>selectRange</apiName><shortdesc>
      选择指定范围的字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>字符位置，用于指定扩展选区时保持固定的选区的未端。
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>字符位置，用于指定扩展选区时移动的选区的未端。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      选择指定范围的字符。
     
      <p>如果任一位置为负，则它将取消选择该文本范围。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc>
      将指定的格式应用到指定范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc>
      将指定的格式应用到指定范围。
     
      <p>支持的格式是 TextFormatLayout 中的那些格式。不应用 <codeph>undefined</codeph> 值。如果不指定范围，则将使用选定范围。</p>
     
      <p>例如，调用
      <pre>
      var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
      textLayoutFormat.fontSize = 12;
      textLayoutFormat.color = 0xFF0000;
      setFormatOfRange(textLayoutFormat);
      </pre>
      将设置所选内容的 fontSize 和颜色。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:RichEditableText:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:content:get"><apiName>content</apiName><shortdesc>
      该属性旨在编译时用于 MXML；在运行时获得或设置富文本内容并改用 textFlow 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      该属性旨在编译时用于 MXML；要在运行时获得或设置富文本内容，请改用 <codeph>textFlow</codeph> 属性。
     
      <p><codeph>content</codeph> 属性是 RichEditableText 的默认属性，因此可以编写 MXML 成如下形式
      <pre>
      &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichEditableText>
      </pre>
      且可以将指定为内容的 String 和 SpanElement 用于创建 TextFlow。</p>
     
      <p>该属性的类型为 Object，因为可以将其设置为 String、FlowElement 或 String 和 FlowElement 的 Array。在上述示例中，所指定的内容是二元数组，其中，第一个元素是字符串“Hello”，第二个元素是含有粗体文本“World”的 SpanElement。</p>
     
      <p>无论指定内容的方式为何，内容都会转换为 TextFlow，且当获得该属性时，即获得生成的 TextFlow。</p>
     
      <p>Adobe 建议运行时使用 <codeph>textFlow</codeph> 属性获得或设置富文本内容，因为它是 TextFlow（而不是 Object）的强类型。在 Text Layout Framework 中，TextFlow 是富文本内容的规范表示。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      文本高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      文本高度。
     
      <p>由于 Text Layout Framework 将 TextLine 虚拟化以获得更佳性能，因此如果组件无法显示所有文本，则此初始高度将为估计值。如果滚动到文本末尾，所有 TextLine 将合成，且 <codeph>contentHeight</codeph> 是准确的。</p>
     
      <p>要在内容中垂直滚动，请在 0 和 <codeph>contentHeight - height</codeph> 之间更改 <codeph>verticalScrollPosition</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      文本的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      文本的宽度。
     
      <p>由于 Text Layout Framework 将 TextLine 虚拟化以获得更佳性能，因此如果组件无法显示所有文本，则此初始宽度将为估计值。如果滚动到文本末尾，所有 TextLine 将合成，且 <codeph>contentWidth</codeph> 是准确的。</p>
     
      <p>要在文本中水平滚动，请在 0 和 <codeph>contentWidth - width</codeph> 之间更改 <codeph>horizontalScrollPosition</codeph>。</p>  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:editable:get"><apiName>editable</apiName><shortdesc>
      指示用户是否可以编辑此控件中的文本的标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指示用户是否可以编辑此控件中的文本的标志。
     
      <p>如果为 <codeph>true</codeph>，当鼠标光标位于该控件的边界上时将变为 Ｉ 形。如果为 <codeph>false</codeph>，鼠标光标将保持为箭头。</p>
     
      <p>如果该属性为 <codeph>true</codeph>，则 <codeph>selectable</codeph> 属性将被忽略。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
      控件的默认高度（以行为单位测量）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      控件的默认高度（以行为单位测量）。
     
      <p>控件的格式样式（例如 <codeph>fontSize</codeph> 和 <codeph>lineHeight</codeph>）用于计算行高像素值。</p>
     
      <p>例如，如果需要 RichEditableText 的高度足够显示 5 行文本，则将该属性设置为 5。</p>
     
      <p>如果该属性为 <codeph>NaN</codeph>（默认值），则组件的默认高度由要显示的文本确定。</p>
      
      <p>如果指定显式高度、百分比高度或 <codeph>top</codeph> 和 <codeph>bottom</codeph> 约束，该属性将被忽略。</p>
     
      <p>RichEditableText 的 <codeph>measure()</codeph> 方法使用 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 来确定 <codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph>。这些与 HTML TextArea 的 <codeph>cols</codeph> 和 <codeph>rows</codeph> 相似。</p>
     
      <p>由于 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 默认为 <codeph>NaN</codeph>，因此默认情况下 RichTextEditable“自动调整大小”：不包含任何文本启动时非常小，随着文本的输入，其宽度不断增大直到 maxWidth，按 Enter 键开始新行时其高度增加。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      文本水平滚动的像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      文本水平滚动的像素数。
     
      <p>要在文本中水平滚动，请在 0 和 <codeph>contentWidth - width</codeph> 之间更改 <codeph>horizontalScrollPosition</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
     
      <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:multiline:get"><apiName>multiline</apiName><shortdesc>
      确定用户是否可以输入多行文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定用户是否可以输入多行文本。
     
      <p>如果为 <codeph>true</codeph>，则 Enter 键会开始一个新段落。如果为 <codeph>false</codeph>，则 Enter 键不会影响该文本但会使 RichEditableText 分派 <codeph>"enter"</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectable:get"><apiName>selectable</apiName><shortdesc>
      一个标志，指示是用鼠标选择内容，还是用键盘选择内容（当控件具有键盘焦点时）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是用鼠标选择内容，还是用键盘选择内容（当控件具有键盘焦点时）。
     
      <p>允许选择文本将使您能够从控件中复制文本。</p>
     
      <p>如果 <codeph>editable</codeph> 属性为 <codeph>true</codeph>，则该属性被忽略。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      相对于文本 String 开头的字符位置，用于指定用箭头键扩展选区时该选区的终点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      相对于 <codeph>text</codeph> 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区的终点。
     
      <p>活动位置可以是选区的起点或终点。</p>
     
      <p>例如，如果拖动选择位置 12 到位置 8 之间的区域，则 <codeph>selectionAnchorPosition</codeph> 将为 12，<codeph>selectionActivePosition</codeph> 将为 8，按向左箭头后 <codeph>selectionActivePosition</codeph> 将变为 7。</p>
     
      <p>值为 -1 时，表示“未设置”。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      相对于文本 String 开头的字符位置，用于指定用箭头键扩展选区时该选区保持固定的终点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      相对于 <codeph>text</codeph> 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区保持固定的终点。
     
      <p>锚点位置可以是选区的起点或终点。</p>
     
      <p>例如，如果拖动选择位置 12 到位置 8 之间的区域，则 <codeph>selectionAnchorPosition</codeph> 将为 12，<codeph>selectionActivePosition</codeph> 将为 8，按向左箭头后 <codeph>selectionActivePosition</codeph> 将变为 7。</p>
     
      <p>值为 -1 时，表示“未设置”。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
      确定何时加亮选择的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定何时加亮选择的文本。
      
      <p>所允许的值由 spark.components.TextSelectionHighlighting 类指定。可能的值有 <codeph>TextSelectionHighlighting.WHEN_FOCUSED</codeph>、<codeph>TextSelectionHighlighting.WHEN_ACTIVE</codeph> 和 <codeph>TextSelectionHighlighting.ALWAYS</codeph>。</p>
     
      <p><codeph>WHEN_FOCUSE</codeph> 表示只有在组件具有键盘焦点时，才显示选择的文本。</p>
      
      <p><codeph>WHEN_ACTIVE</codeph> 表示只要组件的窗口为活动窗口时，就会显示选择的文本（即使组件不具有键盘焦点，也会如此）。</p>
     
      <p><codeph>ALWAYS</codeph> 表示即使组件不具有键盘焦点或组件窗口不是活动窗口，也会显示选择的文本。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.components.TextSelectionHighlighting.xml"><linktext>mx.components.TextSelectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:text:get"><apiName>text</apiName><shortdesc>
      此组件所显示的文本 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      此组件所显示的文本 String。
     
      <p>设置该属性会影响 <codeph>textFlow</codeph> 属性，反之亦然。</p>
     
      <p>如果将 <codeph>text</codeph> 设置为 String（例如<codeph>“Hello World”</codeph>），并获得 <codeph>textFlow</codeph>，则它将是包含单个 ParagraphElement 和单个 SpanElement 的 TextFlow。</p>
     
      <p>如果文本包含显式换行符 - CR（“\r”）、LF（“\n”）或 CR+LF（“\r\n”）- 则内容将设置为包含多个段落且各段落之间含一个间距的 TextFlow。</p>
     
      <p>如果设置 <codeph>textFlow</codeph> 并获得 <codeph>text</codeph>，则各段落中的文本将由单个 LF（“\n”）分隔。</p>
     
      <p>设置该属性也会影响用于指定控件的滚动位置和所选文本的属性。它将 <codeph>horizontalScrollPosition</codeph> 和 <codeph>verticalScrollPosition</codeph> 重置为 0，且将 <codeph>selectionAnchorPosition</codeph> 和 <codeph>selectionActivePosition</codeph> 设置为 -1，以清除选择。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      用于表示该组件显示的富文本的 TextFlow。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      用于表示该组件显示的富文本的 TextFlow。
     
      <p>TextFlow 是 Text Layout Framework (TLF) 中最重要的类。它是表示富文本内容的 FlowElement 的树的根。</p>
     
      <p>通常情况下，使用 <codeph>TextFlowUtil.importFromString()</codeph> 和 <codeph>TextFlowUtil.importFromXML()</codeph> 方法基于 TLF 标记创建 TextFlow。或者，还可以使用 TLF 的 TextConverter 类（可以导入 HTML 的子集），或者对 TextFlow 使用诸如 <codeph>addChild()</codeph> 等方法构建 TextFlow。</p>
     
      <p>设置该属性会影响 <codeph>text</codeph> 属性，反之亦然。</p>
     
      <p>如果设置 <codeph>textFlow</codeph> 并获得 <codeph>text</codeph>，则各段落中的文本将由单个 LF（“\n”）分隔。</p>
     
      <p>如果将 <codeph>text</codeph> 设置为 String（例如<codeph>“Hello World”</codeph>），并获得 <codeph>textFlow</codeph>，则它将是包含单个 ParagraphElement 和单个 SpanElement 的 TextFlow。</p>
     
      <p>如果文本包含显式换行符 - CR（“\r”）、LF（“\n”）或 CR+LF（“\r\n”）- 则内容将设置为包含多个段落且各段落之间含一个间距的 TextFlow。</p>
     
      <p>设置该属性也会影响用于指定控件的滚动位置和所选文本的属性。它将 <codeph>horizontalScrollPosition</codeph> 和 <codeph>verticalScrollPosition</codeph> 重置为 0，且将 <codeph>selectionAnchorPosition</codeph> 和 <codeph>selectionActivePosition</codeph> 设置为 -1，以清除选择。</p>
     
      <p>要将 TextFlow 对象变成 TLF 标记，请使用 <codeph>TextFlowUtil.export()</codeph> 标记。</p>
     
      <p>单个 TextFlow 无法由 RichEditableText 的多个实例共享。要在第二个实例中显示相同的文本，必须使用以下方法再创建一个 TextFlow：使用 <codeph>TextFlowUtil.export()</codeph> 和 <codeph>TextFlowUtil.importFromXML()</codeph> 方法，或对 TextFlow 使用 <codeph>deepCopy()</codeph> 方法。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      文本垂直滚动的像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      文本垂直滚动的像素数。
     
      <p>要在内容中垂直滚动，请在 0 和 <codeph>contentHeight - height</codeph> 之间更改 <codeph>verticalScrollPosition</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      控件的默认宽度（使用 em 单位测量）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      控件的默认宽度（使用 em 单位测量）。
     
      <p>em 是一种印刷测量单位，相当于一个点大小。em 并非必须完全精确等于字母“M”的宽度，但是在很多字体中，“M”大约为一个 em 宽。使用控件的 <codeph>fontSize</codeph> 样式计算 em 单位的像素值。</p>
     
      <p>例如，如果需要 RichEditableText 的宽度足够显示约 20 个文本字符，则将该属性设置为 20。</p>
     
      <p>如果该属性为 <codeph>NaN</codeph>（默认值），则组件的默认宽度由要显示的文本确定。</p>
     
      <p>如果指定显性宽度、百分比宽度或 <codeph>left</codeph> 和 <codeph>right</codeph> 约束，该属性将被忽略。</p>
     
      <p>RichEditableText 的 <codeph>measure()</codeph> 方法使用 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 来确定 <codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph>。这些与 HTML TextArea 的 <codeph>cols</codeph> 和 <codeph>rows</codeph> 相似。</p>
     
      <p>由于 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 默认为 <codeph>NaN</codeph>，因此默认情况下 RichTextEditable“自动调整大小”：不包含任何文本启动时非常小，随着文本的输入，其宽度不断增大直到 maxWidth，按 Enter 键开始新行时其高度增加。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Button"><apiName>Button</apiName><shortdesc>
  Button 组件是常用的矩形按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="accentColor" owner="spark.components:Button" playerVersion="Flash10" theme="spark" type="uint">
<description>
   
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Button&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Button 
    <strong>Properties</strong>
    emphasized="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Button 组件是常用的矩形按钮。Button 组件看起来可以按压。默认外观具有一个文本标签。
 
  <p>当用户选择 Button 控件时，该控件通常使用事件侦听器来执行操作。当用户在 Button 控件上单击鼠标时，就会启用 Button 控件，此控件分派 <codeph>click</codeph> 事件和 <codeph>buttonDown</codeph> 事件。无论按钮是处于启用状态还是禁用状态，总是会分派 <codeph>mouseMove</codeph>、<codeph>mouseOver</codeph>、<codeph>mouseOut</codeph>、<codeph>rollOver</codeph>、<codeph>rollOut</codeph>、<codeph>mouseDown</codeph> 和 <codeph>mouseUp</codeph> 等事件。</p>
 
  <p>Button 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示控件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>21 个像素宽 × 21 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonSkin"><linktext>spark.skins.spark.ButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:Button:Button"><apiName>Button</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
     反映焦点管理器请求的默认按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
     反映焦点管理器请求的默认按钮。当某个按钮充当容器或表单中的默认按钮时，此属性通常由焦点管理器设置。设置为 true 时，会将 <codeph>emphasized</codeph> 样式追加到按钮的 <codeph>styleName</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.managers.FocusManager.defaultButton.xml"><linktext>mx.managers.FocusManager.defaultButton</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  CheckBox 组件包含一个可选标签和一个小方框，该方框内可以包含/不包含复选标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:CheckBox" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:CheckBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:CheckBox/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  CheckBox 组件包含一个可选标签和一个小方框，该方框内可以包含/不包含复选标记。可以将可选文本标签放在 CheckBox 的左侧、右侧、顶部或底部。
 
  <p>用户单击 CheckBox 组件或其关联文本时，CheckBox 组件会将其 <codeph>selected</codeph> 属性设置为 <codeph>true</codeph>（表示选中）或 <codeph>false</codeph>（表示取消选中）。</p>
 
 
  <p>CheckBox 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示控件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>18 个像素宽 × 18 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.CheckBoxSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#CheckBoxSkin"><linktext>spark.skins.spark.CheckBoxSkin</linktext></link></related-links><apiConstructor id="spark.components:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TabBar"><apiName>TabBar</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:TabBar" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:TabBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TabBar
    <b>Styles</b>
    cornerRadius="4"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph/>
 
  <p><codeph/></p>
 
  <p/>
  
  <pre>
  &lt;s:TabBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext/></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext/></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.components:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><skinStates><SkinState name="inactiveWithControlBar" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="inactive" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="closeButton" owner="spark.components:TitleWindow" required="false" var_type="spark.components:Button">
<description>
      <codeph/>
     
      <p><codeph/></p>
     
      <p/>
     </description>
	</SkinPart><SkinPart name="moveArea" owner="spark.components:TitleWindow" required="false" var_type="flash.display:InteractiveObject">
<description>
      
     
      <p/>
     </description>
	</SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;s:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:TitleWindow&gt;
    <strong>Events</strong>
    close="<i>No default</i>"
    windowMoveStart="<i>No default</i>"
    windowMoving="<i>No default</i>"
    windowMove="<i>No default</i>"
    windowMoveEnd="<i>No default</i>"
  &lt;/s:TitleWindow&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  <p><codeph/><codeph/></p>
  
  <p>TitleWindow 容器具有以下默认大小特征：</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>高度足以容纳以下内容：内容区域中使用默认或明确指定的高度时的所有子项、标题栏和边框、各子项间的垂直间隔，以及容器的顶部和底部填充。宽度大于以下各项之和：最宽子项的默认或明确指定的宽度，以及容器的左右边界填充或标题文本的宽度。</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext/></link><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext/></link><link href="" invalidHref="mx.managers.PopUpManager.xml"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当用户选择关闭按钮时，分派此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户选择关闭按钮时，分派此方法。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TitleWindow:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      
      
      返回要应用到外观的状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>指定要应用到外观的状态的名称的字符串。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      
      
      返回要应用到外观的状态的名称。例如，一个 Button 组件可能会返回 String“up”、“down”、“over”或“disabled”以指定该状态。
     
      <p>SkinnableComponent 的子类必须覆盖此方法才可返回值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:Group"><apiName>Group</apiName><shortdesc>
  Group 类是可视元素的容器基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Group&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Group
    <strong>Properties</strong>
    blendMode="auto"
    mxmlContent="null"
    scaleGridBottom="null"
    scaleGridLeft="null"
    scaleGridRight="null"
    scaleGridTop="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Group 类是可视元素的容器基类。Group 容器将实现 IUIComponent 接口的任何组件和实现 IGraphicElement 接口的任何组件视为子项。希望管理可视子项（可视组件和图形组件）时，使用此容器。 
 
  <p>为了改进性能和最小化应用程序大小，不能设置 Group 容器的外观。如果希望应用外观，请改用 SkinnableContainer。</p>
 
  <p>注意：当 Group 内部存在 DisplayObject 子代（如组件或另一个 Group）时，刻度网格可能无法正常工作。如果子代是 GraphicElement，且它们全部共享 Group 的 DisplayObject，则刻度网格将正常工作。</p> 
 
  <p>设置 GraphicElement 子代上的下列任何属性将要求 GraphicElement 创建其自己的 DisplayObject，从而使 Group 上的刻度网格属性无效。</p>  
 
  <pre>
  alpha
  blendMode other than BlendMode.NORMAL or "auto"
  colorTransform
  filters
  mask
  matrix
  rotation
  scaling
  3D properties
  bounds outside the extent of the Group
  </pre>
  
  </apiDesc><example conref="GroupExample.mxml"><swfblock conref="examples/GroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  从内容容器中删除可视元素时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  从内容容器中删除可视元素时分派。<codeph>event.element</codeph> 是正在删除的可视元素。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  将可视元素添加到内容容器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  将可视元素添加到内容容器时分派。<codeph>event.element</codeph> 是已添加的可视元素。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Group:Group"><apiName>Group</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Group:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      请注意元素已更改且需要重新绘制的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>已更改的元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素已更改且需要重新绘制的主机组件。Group 对 IGraphicElement 调用 <codeph>validateDisplayList()</codeph> 方法，为其赋予重新绘制的机会。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      请注意元素已更改且需要验证属性的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>已更改的元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素已更改且需要验证属性的主机组件。Group 对 IGraphicElement 调用 <codeph>validateProperties()</codeph> 方法，为其赋予提交其属性的机会。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      请注意元素图层已更改的主机。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>已更改大小的元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素图层已更改的主机。Group 将使用共享的 DisplayObject 重新评估元素的序列，且可能会重新指定 DisplayObject，并因此重新绘制这些序列。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      请注意元素大小已更改的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>已更改大小的元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素大小已更改的主机组件。Group 对 IGraphicElement 调用 <codeph>validateSize()</codeph> 方法，为其赋予验证其大小的机会。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Group:blendMode:get"><apiName>blendMode</apiName><shortdesc>
      BlendMode 类中的一个值，用于指定要使用的混合模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      BlendMode 类中的一个值，用于指定要使用的混合模式。 内部绘制位图的方法有两种。  如果启用了混合模式或外部剪辑蒙版，则将通过向矢量渲染器添加有位图填充的正方形来绘制位图。如果尝试将此属性设置为无效值，则 Flash Player 或 Adobe AIR 会将该值设置为 <codeph>BlendMode.NORMAL</codeph>。 
     
      <p><codeph/><codeph/><codeph/></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/blendMode"><linktext>flash.display.DisplayObject.blendMode</linktext></link><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Group:scaleGridBottom:get"><apiName>scaleGridBottom</apiName><shortdesc>
      指定刻度网格的底部坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定刻度网格的底部坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridLeft:get"><apiName>scaleGridLeft</apiName><shortdesc>
     指定刻度网格的左侧坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     指定刻度网格的左侧坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridRight:get"><apiName>scaleGridRight</apiName><shortdesc>
     指定刻度网格的右侧坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     指定刻度网格的右侧坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridTop:get"><apiName>scaleGridTop</apiName><shortdesc>
     指定刻度网格的顶部坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     指定刻度网格的顶部坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc>
      此 Group 的可视内容子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      此 Group 的可视内容子项。此方法供 Flex 内部使用，不适合由开发人员直接使用。
     
      <p>内容项目仅应该是 IVisualElement 对象。因为可视元素一次仅可以处于一个容器中，所以不应该在多个 Group 容器之间共享 <codeph>mxmlContent</codeph> Array。</p>
     
      <p>如果内容是一个 Array，不要直接修改该 Array。请改用由 Group 类定义的方法。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  RadioButton 组件使用户可在一组互相排斥的选择中做出一种选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:RadioButton" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButton
    <strong>Properties</strong>
    group=the automatically created default RadioButtonGroup
    groupName="radioGroup"
    value="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButton 组件使用户可在一组互相排斥的选择中做出一种选择。RadioButtonGroup 包含具有相同 <codeph>groupName</codeph> 属性的两个或更多 RadioButton 组件。当可以选择在 RadioButtonGroup 中组合 RadioButton 实例时，组使您能够执行诸如在一组 RadioButton 上（而不是在每个单独的 RadioButton 上）设置单一事件处理函数等事项。
 
  <p>RadioButton 组可以引用 <codeph>&lt;s:RadioButtonGroup></codeph> 标签创建的组。用户一次只能选择此组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 RadioButton 组件。</p>
 
  <p>RadioButton 组件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示组件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>18 个像素宽 × 18 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.RadioButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link><link href="spark.skins.spark.xml#RadioButtonSkin"><linktext>spark.skins.spark.RadioButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RadioButton:enabled:get"><apiName>enabled</apiName><shortdesc>
      如果 RadioButtonGroup 启用，则 RadioButton 组件启用，且 RadioButton 本身也启用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果 RadioButtonGroup 启用，则 RadioButton 组件启用，且 RadioButton 本身也启用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      此 RadioButton 所属的 RadioButtonGroup 组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButtonGroup</apiValueClassifier><apiDefaultValue>the automatically created default RadioButtonGroup
      </apiDefaultValue></apiValueDef><apiDesc>
      此 RadioButton 所属的 RadioButtonGroup 组件。创建要放入 RadioButtonGroup 中的 RadioButton 时，应该对所有按钮使用 <codeph>group</codeph> 属性或者 <codeph>groupName</codeph> 属性。
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/groupName"><linktext>groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      指定此 RadioButton 组件所属的组的名称，或者，如果此 RadioButton 是 RadioButtonGroup 组件定义的组的一部分，则指定 RadioButtonGroup 组件的 ID 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"radioGroup"
      </apiDefaultValue></apiValueDef><apiDesc>
      指定此 RadioButton 组件所属的组的名称，或者，如果此 RadioButton 是 RadioButtonGroup 组件定义的组的一部分，则指定 RadioButtonGroup 组件的 <codeph>ID</codeph> 属性值。具有相同 <codeph>groupName</codeph> 属性的所有单选按钮都将位于同一个选项卡组。
     
      <p>创建要放入 RadioButtonGroup 中的单选按钮时，建议对所有按钮使用 <codeph>group</codeph> 属性或者 <codeph>groupName</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/group"><linktext>group</linktext></link><link href="" invalidHref="mx.manager.xml#IFocusManagerGroup/groupName"><linktext>mx.manager.IFocusManagerGroup.groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      与 RadioButton 组件关联的可选用户定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      与 RadioButton 组件关联的可选用户定义值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextInput"><apiName>TextInput</apiName><shortdesc>
  TextInput 是一个文本输入控件，供用户输入和编辑单行统一格式文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="lineBreak"/><Exclude kind="style" name="verticalAlign"/><DefaultProperty name="text"/><skinStates><SkinState name="disabled" owner="spark.components:TextInput" playerVersion="Flash10">
<description>
  禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:TextInput" playerVersion="Flash10">
<description>
  正常状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TextInput&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TextInput
    <strong>Properties</strong>
    widthInChars=""
  
    <strong>Events</strong>
    enter="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextInput 是一个文本输入控件，供用户输入和编辑单行统一格式文本。
 
  <p>TextInput 的 Spark 版本，是 Flex 4 的新功能，它采用新的 Text Layout Framework （TLF) 库，该库又基于 Flash Player 10 中的 Flash Text Engine (FTE) 新版本。组合后，可以使用高质量国际印刷效果编辑文本。TextInput 的 MX 版本使用旧版 TextField 类显示文本。</p>
 
  <p>可以使用 <codeph>text</codeph> 属性设置要显示的文本或获取用户已输入的文本。该属性是一个 String，因此如果用户输入数值，例如，会将该数值报告为“123.45”，而不是 123.45。</p>
 
  <p>使用 CSS 样式（例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>）设置文本格式。</p>
 
  <p>通过 <codeph>widthInChars</codeph> 属性，可以很方便地采用缩放字体大小的方式指定宽度。当然，还可以指定显式宽度像素值、百分比宽度或使用 <codeph>left</codeph> 和 <codeph>right</codeph> 等约束。通常情况下，不需要执行任何操作来指定高度；控件的默认高度足以能够显示一行文本。</p>
 
  <p>可以使用 <codeph>maxChars</codeph> 属性限制用户可以输入的字符数，使用 <codeph>restrict</codeph> 限制用户可以输入的字符。要使用该控件输入密码，请将 <codeph>displayAsPassword</codeph> 属性设置为 <codeph>true</codeph>。</p>
 
  <p>当用户按 Enter 键，而不是插入换行符时，该控件分派 <codeph>FlexEvent.ENTER</codeph> 事件，因为该控件不支持输入多行文本。</p>
 
  <p>该控件是一个可设置外观的控件，其外观包含处理显示和编辑文本的 RichEditableText 实例。（该外观还会处理绘制边框和背景。）此 RichEditableText 可以作为 <codeph>textDisplay</codeph> 对象访问。</p>
 
  <p>因为 RichEditableText 使用 TLF，所以 Spark TextInput 支持显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语语句中的法语语句）。如果文本的主要书写方向为从右到左，可以将 <codeph>direction</codeph> 样式设置为<codeph>“rtl”</codeph>。<codeph>textAlign</codeph> 样式默认为<codeph>“start”</codeph>，这样，当 <codeph>direction</codeph> 为<codeph>“ltr”</codeph>时，文本左对齐；当 <codeph>direction</codeph> 为<codeph>“rtl”</codeph>时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为<codeph>“end”</codeph>。</p>
 
  <p>此外，使用 TLF 后，Spark TextInput 还支持在一个编辑会话内执行无限次撤消/重做操作。编辑会话在控件获得键盘焦点时启动，在控件失去焦点时结束。</p>
 
  <p>TextInput 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>188 个像素宽 × 22 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>2 个像素宽 × 2 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.TextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#TextInputSkin"><linktext>spark.skins.spark.TextInputSkin</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext>TextArea</linktext></link></related-links><adobeApiEvent id="spark.components:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  当用户按下 Enter 键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户按下 Enter 时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TextInput:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      控件的默认宽度（使用 em 单位测量）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
	 
	  </apiDefaultValue></apiValueDef><apiDesc>
      控件的默认宽度（使用 em 单位测量）。
	 
	  <p>em 是一种印刷测量单位，相当于一个点大小。em 并非必须完全精确等于字母“M”的宽度，但是在很多字体中，“M”大约为一个 em 宽。使用控件的 <codeph>fontSize</codeph> 样式计算 em 单位的像素值。</p>
	 
	  <p>例如，如果需要 TextInput 的宽度足够输入约 20 个文本字符，则将该属性设置为 20。</p>
	 
	  <p>如果指定显性宽度、百分比宽度或 <codeph>left</codeph> 和 <codeph>right</codeph> 约束，该属性将被忽略。</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:ToggleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  此项呈示器是在 ButtonBarSkin 类（ButtonBar 的默认外观）中使用的。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><adobeApiEvent id="spark.components:ButtonBarButton_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:ButtonBarButton:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ButtonBarButton:allowDeselection:get"><apiName>allowDeselection</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:data:get"><apiName>data</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:label:get"><apiName>label</apiName><shortdesc>
      
      要在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      要在项呈示器中显示的 String。 
           <p>项呈示器的主机组件可以使用 <codeph>itemToLabel()</codeph> 方法将数据项目转换为 String 以便项呈示器可以将其显示。 </p>
     
      <p>对于诸如 List 和 ButtonBar 等控件，可以使用 <codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 属性指定包含 String 的数据项目的字段。否则，主机组件使用 <codeph>toString()</codeph> 方法将数据项目转换为 String。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      如果项目渲染器可以将其自身显示为已获取焦点，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      如果项目渲染器可以将其自身显示为已获取焦点，则包含 <codeph>true</codeph>。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Panel"><apiName>Panel</apiName><shortdesc>
  Panel 类定义一个容器，该容器为其子代提供标题栏、题注、边框和内容区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的投影的可见性。
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的角的半径。
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的边框的可见性。
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="uint">
<description>
  此组件的边框的颜色。
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的边框的 Alpha。
 
  </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      定义容器控件栏区域外观的外观部件。默认情况下，PanelSkin 类定义以灰色背景显示在 Panel 容器内容区域底部的控件栏区域。 
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      定义容器中标题文本的外观的外观部件。
     
      </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:Panel
   <strong>Properties</strong>
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    title=""
 
   <strong>Styles</strong>
    borderAlpha="0.5"
    borderColor="0"
    borderVisible="true"
    cornerRadius="0"
    dropShadowVisible="true"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:Panel&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Panel 类定义一个容器，该容器为其子项提供标题栏、题注、边框和内容区域。
   </apiDesc><example conref="PanelExample.mxml"><swfblock conref="examples/PanelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links><apiConstructor id="spark.components:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Panel:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      
      返回要应用到外观的状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>指定要应用到外观的状态的名称的字符串。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      
      返回要应用到外观的状态的名称。例如，一个 Button 组件可能会返回 String“up”、“down”、“over”或“disabled”以指定该状态。
     
      <p>SkinnableComponent 的子类必须覆盖此方法才可返回值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Panel:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      
      正删除外观部件的实例时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      正删除外观部件的实例时调用。不要直接调用此方法。对于静态部件，Flex 会在调用 <codeph>detachSkin()</codeph> 方法时自动调用此方法。对于动态部件，Flex 会在调用 <codeph>removeDynamicPartInstance()</codeph> 方法时自动调用此方法。 
     
      <p>覆盖此函数以从该部件删除行为。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Panel:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      包含在 Panel 容器控件栏区域中的组件集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      包含在 Panel 容器控件栏区域中的组件集。Panel 容器控件栏区域的位置和外观由 spark.skins.spark.PanelSkin 类确定。默认情况下，PanelSkin 类定义以灰色背景显示在 Panel 容器内容区域底部的控件栏区域。创建自定义外观以更改控件栏的默认外观。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Panel:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      定义容器控件栏区域的布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      定义容器控件栏区域的布局。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/>
     
      <p><b/><codeph/></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:title:get"><apiName>title</apiName><shortdesc>
      标题栏中显示的标题或题注。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      标题栏中显示的标题或题注。 
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HGroup"><apiName>HGroup</apiName><shortdesc>
  HGroup 容器是使用 HorizontalLayout 类的 Group 容器的一个实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:HGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:HGroup
    <strong>Properties</strong>
    columnWidth="no default"
    gap="6"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount="-1"
    variableColumnWidth"true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  HGroup 容器是使用 HorizontalLayout 类的 Group 容器的一个实例。不要修改 <codeph>layout</codeph> 属性。请改用 HGroup 类的属性来修改 HorizontalLayout 类的特征。
 
  </apiDesc><example conref="HGroupExample.mxml"><swfblock conref="examples/HGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#HorizontalLayout"><linktext>spark.layouts.HorizontalLayout</linktext></link></related-links><apiConstructor id="spark.components:HGroup:HGroup"><apiName>HGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。将 <codeph>layout</codeph> 属性初始化为 HorizontalLayout 类的一个实例。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="spark.layout.HorizontalLayout.xml"><linktext>spark.layout.HorizontalLayout</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:HGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.HorizontalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:variableColumnWidth:get"><apiName>variableColumnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  NumericStepper 控件允许从有序集中选择编号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的透明度。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的边框的可见性。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  此组件的边框的颜色。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的边框的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components:NumericStepper" playerVersion="Flash10" required="true" var_type="spark.components:TextInput">
<description>
      定义 TextInput 控件的外观部件，该控件允许用户编辑 NumericStepper 组件的值。当用户按 Enter 键、将焦点从 NumericStepper 移开或增减 NumericStepper 时，会将该值四舍五入并提交。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NumericStepper&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NumericStepper
 
    <strong>Properties</strong>
    imeMode="null"
    maxChars="0"
    maximum="10"
    valueFormatFunction=""
    valueParseFunction=""
 
    <strong>Styles</strong>
 
   alignmentBaseline="USE_DOMINANT_BASELINE"
   baselineShift="0.0"
   blockProgression="TB"
   breakOpportunity="AUTO"
   cffHinting="HORIZONTAL_STEM"
   color="0"
   contentBackgroundColor=""
   digitCase="DEFAULT"
   digitWidth="DEFAULT"
   direction="LTR"
   dominantBaseline="AUTO"
   firstBaselineOffset="AUTO"
   focusedTextSelectionColor=""
   fontFamily="Times New Roman"
   fontLookup="DEVICE"
   fontSize="12"
   fontStyle="NORMAL"
   fontWeight="NORMAL"
   inactiveTextSelection=""
   justificationRule="AUTO"
   justificationStyle="AUTO"
   kerning="AUTO"
   leadingModel="AUTO"
   ligatureLevel="COMMON"
   lineHeight="120%"
   lineThrough="false"
   locale="en"
   paragraphEndIndent="0"
   paragraphSpaceAfter="0"
   paragraphSpaceBefore="0"
   paragraphStartIndent="0"
   renderingMode="CFF"
   tabStops="null"
   textAlign="START"
   textAlignLast="START"
   textAlpha="1"
   textDecoration="NONE"
   textIndent="0"
   textJustify="INTER_WORD"
   textRotation="AUTO"
   trackingLeft="0"
   trackingRight="0"
   typographicCase="DEFAULT"
   unfocusedTextSelectionColor=""
   whiteSpaceCollapse="COLLAPSE"
 /&gt;
 </pre>

  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components:Spinner</apiBaseClassifier></apiClassifierDef><apiDesc>
  NumericStepper 控件允许从有序集中选择编号。NumericStepper 提供与 Spinner 组件相同的功能，但增加了一个 TextInput 控件，这样可以直接编辑组件的值，而无需使用控件的箭头按钮来对其进行修改。
 
  <p>NumericStepper 控件包括一个单行输入文本字段和一对用于逐一显示可能值的箭头按钮。还可使用向上箭头键和向下箭头键以及鼠标滑轮遍历这些值。当用户按 Enter 键，从组件删除焦点，或通过按箭头按钮或调用 <codeph>changeValueByStep()</codeph> 方法增减 NumericStepper 时，将提交输入值。</p>
 
  <p>NumericStepper 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>53 个像素宽 × 23 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>40 个像素宽 × 40 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.NumericStepperSkin
              <p>spark.skins.spark.NumericStepperTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#NumericStepperSkin"><linktext>spark.skins.spark.NumericStepperSkin</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      构造函数
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
     
     <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      字段中最多可输入的字符数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      字段中最多可输入的字符数。0 值表示可以输入任意数目的字符。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueFormatFunction:get"><apiName>valueFormatFunction</apiName><shortdesc>
      回调对在外观的 textDisplay 属性中显示的值设置格式的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      回调对在外观的 <codeph>textDisplay</codeph> 属性中显示的值设置格式的函数。此函数使用单个 Number 作为参数并返回格式化的 String。
     
      <p>此函数包含下列签名：</p>
      <pre>
      funcName(value:Number):String
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueParseFunction:get"><apiName>valueParseFunction</apiName><shortdesc>
      回调从外观的 textDisplay 字段中显示的值提取数值的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      回调从外观的 <codeph>textDisplay</codeph> 字段中显示的值提取数值的函数。此函数使用单个 String 作为参数并返回 Number。
     
      <p>此函数包含下列签名：</p>
      <pre>
      funcName(value:String):Number
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:maximum:set"><apiName>maximum</apiName><shortdesc>
      表示 value 的最大可能值的数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示 <codeph>value</codeph> 的最大可能值的数值。如果 <codeph>minimum</codeph> 或 <codeph>value</codeph> 的值大于 <codeph>maximum</codeph>，则将更改它们以反映新的 <codeph>maximum</codeph>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRendererOwner"><apiName>IItemRendererOwner</apiName><shortdesc>
  IItemRendererOwner 接口定义基本 API 集，类必须实现这些 API 集才能支持项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IItemRendererOwner 接口定义基本 API 集，类必须实现这些 API 集才能支持项呈示器。实现 IItemRendererOwner 接口的类称为项呈示器的主机组件。
  
  <p>定义项呈示器的类必须实现 IItemRenderer 接口。</p> 
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link></related-links><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      返回可在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>可在项呈示器中显示的 String。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要显示的数据项目。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回可在项呈示器中显示的 String。将 String 写入到项呈示器的 <codeph>labelText</codeph> 属性。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      更新呈示器以重用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>项呈示器。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      更新呈示器以重用。
     
      <p/>    
           </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:Spinner"><apiName>Spinner</apiName><shortdesc>
  Spinner 组件从有序集中选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabled" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  正常状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的焦点外框的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的角的半径。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="decrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      定义在按下时按 <codeph>stepSize</codeph> 减小 <codeph>value</codeph> 属性的按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="incrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      定义在按下时按 <codeph>stepSize</codeph> 增大 <codeph>value</codeph> 属性的按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Spinner&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Spinner
    <strong>Properties</strong>
    allowValueWrap="false"
  
    <strong>Events</strong>
    change="<i>No default</i>"
 
    <strong>Styles</strong>
    focusColor=""
    symbolColor=""
      
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spinner 组件从有序集中选择值。它使用基于 <codeph>stepSize</codeph> 属性的当前值增大或减小当前值的两个按钮。
  
  <p>Spinner 由两个必需按钮组成，一个用于增大当前值，一个用于减小当前值。用户还可使用向上箭头键和向下箭头键或鼠标滚轮遍历这些值。当用户按 Enter 键，从组件删除焦点，或通过按箭头按钮或调用 <codeph>changeValueByStep()</codeph> 方法增减 Spinner 时，将提交输入值。</p>
 
  <p>Spinner 组件的范围是 <codeph>value</codeph> 属性的允许的值集。<codeph/><codeph/>例如：</p>
  
  <ul>
    <li><codeph>minimum</codeph> = -1</li>
    <li><codeph>maximum</codeph> = 10</li>
    <li><codeph>snapInterval</codeph> = 3</li>
  </ul>
  
  因此，该范围是 {-1,2,5,8,10}。
 
  <p>Spinner 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>19 个像素宽 × 23 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>12 个像素宽 × 12 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.SpinnerSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SpinnerExample.mxml"><swfblock conref="examples/SpinnerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#SpinnerSkin"><linktext>spark.skins.spark.SpinnerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Spinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  当 Spinner 控件的值由于用户交互操作而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 Spinner 控件的值由于用户交互操作而发生更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Spinner:Spinner"><apiName>Spinner</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Spinner:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      返回要应用到外观的状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>指定要应用到外观的状态的名称的字符串。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      返回要应用到外观的状态的名称。例如，一个 Button 组件可能会返回 String“up”、“down”、“over”或“disabled”以指定该状态。
     
      <p>SkinnableComponent 的子类必须覆盖此方法才可返回值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Spinner:protected:system_mouseWheelHandler"><apiName>system_mouseWheelHandler</apiName><shortdesc>
      当组件处于焦点时处理 mouseWheel 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      当组件处于焦点时处理 <codeph>mouseWheel</codeph> 事件。滑块按鼠标事件 delta 与 <codeph>stepSize</codeph> 的乘积移动。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Spinner:allowValueWrap:get"><apiName>allowValueWrap</apiName><shortdesc>
      当前 value 是 maximum 或 minimum 值时，为一个步长确定控件的行为。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前 <codeph>value</codeph> 是 <codeph>maximum</codeph> 或 <codeph>minimum</codeph> 值时，为一个步长确定控件的行为。如果 <codeph>allowValueWrap</codeph> 为 <codeph>true</codeph>，则 <codeph>value</codeph> 属性会从 <codeph>maximum</codeph> 回绕到 <codeph>minimum</codeph> 值，或者从 <codeph>minimum</codeph> 回绕到 <codeph>maximum</codeph> 值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
  SkinnableContainer 类是具有可视内容的可设置外观容器的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
 </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的透明度。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的背景色。
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的背景的 Alpha 水平。有效值范围是 0.0 到 1.0。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  启用组件但组件没有焦点时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="contentGroup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      定义 Group（内容子项将被推入到其中并进行布置）的必需外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableContainer
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    creationPolicy="auto"
    horizontalScrollPosition="null"
    layout="BasicLayout"
    verticalScrollPosition="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableContainer 类是具有可视内容的可设置外观容器的基类。SkinnableContainer 容器将实现 IVisualElement 接口的任何组件视为子项。所有 Spark 和 Halo 组件都实现 IVisualElement 接口，就像 GraphicElement 类一样。这意味着该容器可以将图形类（如 Rect 和 Ellipse）作为子项使用。
 
  <p>为了改进性能和最小化应用程序大小，可以使用 Group 容器。不能设置 Group 容器的外观。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>Group</linktext></link><link href="spark.skins.spark.xml#SkinnableContainerSkin"><linktext>spark.skins.spark.SkinnableContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  从内容容器中删除可视元素时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  从内容容器中删除可视元素时分派。<codeph>event.element</codeph> 是正在删除的可视元素。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  将可视元素添加到内容容器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  将可视元素添加到内容容器时分派。<codeph>event.element</codeph> 是已添加的可视元素。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  已创建此组件的内容后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  已创建此组件的内容后分派。借助实例化延迟，可以在创建组件之后很长时间创建组件的内容。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableContainer:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableContainer:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      如果 creationPolicy 属性不等于 none，则创建内容子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      如果 <codeph>creationPolicy</codeph> 属性不等于 <codeph>none</codeph>，则创建内容子项。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      为此组件创建内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      为此组件创建内容。<codeph>creationPolicy</codeph> 属性为 <codeph>auto</codeph> 或 <codeph>all</codeph> 时，Flex 框架将自动调用此函数。<codeph>creationPolicy</codeph> 为 <codeph>none</codeph> 时，将调用此方法以初始化内容。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      
      添加外观部件时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      添加外观部件时调用。不要直接调用此方法。对于静态部件，Flex 会在调用 <codeph>attachSkin()</codeph> 方法时自动调用此方法。对于动态部件，Flex 会在调用 <codeph>createDynamicPartInstance()</codeph> 方法时自动调用此方法。 
     
      <p>覆盖此函数以将行为附加到该部件。如果希望覆盖从某个基类继承的外观部件上的行为，请确保不要调用 <codeph>super.partAdded()</codeph> 方法。否则，应始终调用 <codeph>super.partAdded()</codeph> 方法。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      正删除外观部件的实例时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      正删除外观部件的实例时调用。不要直接调用此方法。对于静态部件，Flex 会在调用 <codeph>detachSkin()</codeph> 方法时自动调用此方法。对于动态部件，Flex 会在调用 <codeph>removeDynamicPartInstance()</codeph> 方法时自动调用此方法。 
     
      <p>覆盖此函数以从该部件删除行为。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      如果延迟的内容已创建，则为 True。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果延迟的内容已创建，则为 True。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc conref="spark.components.Group#mxmlContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc conref="spark.components.Group#mxmlContent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContentFactory:set"><apiName>mxmlContentFactory</apiName><shortdesc>
      为 content 属性创建初始值的 factory 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IDeferredInstance"/></apiValueDef><apiDesc>
      为 content 属性创建初始值的 factory 对象。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichText"><apiName>RichText</apiName><shortdesc>
  RichText 是可以显示一行或多行富文本或嵌入图像的低级 UIComponent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><styles><style inherit="no" name="columnWidth" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnGap">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnCount" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnCount">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#verticalAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingTop">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingBottom">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineBreak">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:RichText" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichText" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichText 是可以显示一行或多行富文本或嵌入图像的低级 UIComponent。
 
  <p>由于性能原因，它不支持滚动、选择、编辑、可单击的超链接或从 URL 加载的图像。如果需要这些功能，请参阅 RichEditableText 类。</p>
 
  <p>RichText 是 Flex 4 的新功能，它采用新的 Text Layout Framework （TLF) 库，该库又基于 Flash Player 10 中的 Flash Text Engine (FTE) 新版本。组合后，它们可以提供使用高质量国际印刷效果的富文本布局。</p>
 
  <p>Spark 体系结构提供三个文本“原型”（Label、RichText 和 RichEditableText）作为其“仅在用户需要时支付”基本原理的一部分。Label 运行速度最快且占用内存最少，因为它仅使用 FTE，没有 TLF，但其功能有限：无富文本、不可滚动、不可选择、不可编辑。RichText 新增了使用复杂布局显示富文本的功能，但仍然完全是非交互式的。RichEditableText 运行速度最慢且占用内存最多，但是提供 TLF 可以执行的大部分功能。您应该使用能够满足需求的最快速的文本原型。</p>
 
  <p>RichText 与 MX 控件 mx.controls.Text 相似。MX 控件使用旧版 TextField 类（而不是 TLF）来显示文本。</p>
 
  <p>要了解的最重要区别有
  <ul>
    <li>与 Text 相比，RichText 可提供更佳的印刷效果和文本布局，且能更好地支持各国语言。</li>
    <li>RichText 拥有所显示内容的面向对象模型版本，而 Text 没有。</li>
    <li>Text 是可选择的，但 RichText 不支持选择操作。</li>
  </ul></p>
 
 
  <p>RichText 使用 TLF 面向对象模型的富文本，其中，诸如分段、段落、跨距和图像等文本布局元素在运行时由 ActionScript 对象表示，可以通过编程方式访问和操纵该对象。TLF 中用于表示富文本的中心对象是 TextFlow，因此可以通过将 RichText 的 <codeph>textFlow</codeph> 属性设置为 TextFlow 实例，来指定应显示的相应 RichText。（有关如何创建 TextFlow 的信息，请参阅 <codeph>textFlow</codeph> 属性的描述。）还可以设置从 TextBase 继承的 <codeph>text</codeph> 属性，但是如果不需要 TextFlow 的各种格式，应考虑改用 Label。</p>
 
  <p>编译时，仅可以将 TLF 标记标签放在 RichText 标签内，如下例所示
  <pre>
  &lt;s:RichText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichText>
  </pre>
  在此示例中，MXML 编译器设置了 <codeph>content</codeph> 属性，从而导致基于所指定的 FlowElement 自动创建 TextFlow。</p>
 
  <p>默认文本格式由 CSS 样式确定，例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>。TextFlow 中的任何格式信息都会覆盖 CSS 样式确定的默认格式。</p>
 
  <p>使用 <codeph>lineHeight</codeph> 样式可以控制行间距；使用 <codeph>paragraphSpaceBefore</codeph> 和 <codeph>paragraphSpaceAfter</codeph> 样式可以控制段间距。可以使用 <codeph>textAlign</codeph> 和 <codeph>textAlignLast</codeph> 样式将文本对齐或两端对齐。可以使用 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> 和 <codeph>paddingBottom</codeph> 样式从组件边缘插入文本。</p>
 
  <p>如果没有为 RichText 指定任何类型的宽度，则由这些显式换行符确定的最长行将确定 Label 的宽度。</p>
 
  <p>当指定某种类型的宽度时，文本将在组件的右边缘换行，且当文本超出了组件宽度时文本将会被剪切。如果将 <codeph>lineBreak</codeph> 样式设置为<codeph>“explicit”</codeph>，则仅在显式换行符开始新行，例如，在 <codeph>text</codeph> 中使用 CR（<codeph>“\r”</codeph>）、LF（<codeph>“\n”</codeph>）或 CR+LF（<codeph>“\r\n”</codeph>）的情况，或者在 TLF 标记中使用 <codeph>&lt;p></codeph> 或 <codeph>&lt;br></codeph> 的情况。在该情况下，将剪切比控件宽的行。</p>
 
  <p>如果文本超出了显示这些文本的空间，RichText 可以截断文本。截断文本意味着使用截断指示符（如 "..."）替换超额文本。请参阅继承的属性 <codeph>maxDisplayedLines</codeph> 和 <codeph>isTruncated</codeph>。</p>
 
  <p>默认情况下，RichText 没有背景，但是可以使用 <codeph>backgroundColor</codeph> 和 <codeph>backgroundAlpha</codeph> 样式绘制一个背景。不支持边框。如果需要边框或更复杂的背景，请在 RichText 后面使用单独的图形元素，例如 Rect。</p>
 
  <p>因为 RichText 使用 TLF，所以它支持显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语语句中的法语语句）。如果文本的主要书写方向为从右到左，可以将 <codeph>direction</codeph> 样式设置为<codeph>“rtl”</codeph>。<codeph>textAlign</codeph> 样式默认为<codeph>“start”</codeph>，这样，当 <codeph>direction</codeph> 为<codeph>“ltr”</codeph>时，文本左对齐；当 <codeph>direction</codeph> 为<codeph>“rtl”</codeph>时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为<codeph>“end”</codeph>。</p>
 
  <p>RichText 使用 TLF 的 StringTextFlowFactory 类和 TextFlowTextLineFactory 类创建一个或多个 TextLine 对象，以静态显示其文本。由于性能原因，其 TextLine 不包含有关各个字型的信息；有关更多信息，请参阅 flash.text.engine.TextLineValidity.STATIC。</p>
 
  </apiDesc><example conref="RichTextExample.mxml"><swfblock conref="examples/RichTextExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link></related-links><apiConstructor id="spark.components:RichText:RichText"><apiName>RichText</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RichText:content:get"><apiName>content</apiName><shortdesc>
	  该属性旨在编译时用于 MXML；在运行时获得或设置富文本内容并改用 textFlow 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  该属性旨在编译时用于 MXML；要在运行时获得或设置富文本内容，请改用 <codeph>textFlow</codeph> 属性。
	 
	  <p><codeph>content</codeph> 属性是 RichText 的默认属性，因此可以编写 MXML 成如下形式
	  <pre>
	  &lt;s:RichText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichText>
	  </pre>
	  且可以将指定为内容的 String 和 SpanElement 用于创建 TextFlow。</p>
	 
	  <p>该属性的类型为 Object，因为可以将其设置为 String、FlowElement 或 String 和 FlowElement 的 Array。在上述示例中，所指定的内容是二元数组，其中，第一个元素是字符串“Hello”，第二个元素是含有粗体文本“World”的 SpanElement。</p>
	 
	  <p>无论指定内容的方式为何，内容都会转换为 TextFlow，且当获得该属性时，即获得生成的 TextFlow。</p>
	 
	  <p>Adobe 建议运行时使用 <codeph>textFlow</codeph> 属性获得或设置富文本内容，因为它是 TextFlow（而不是 Object）的强类型。在 Text Layout Framework 中，TextFlow 是富文本内容的规范表示。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      用于表示该组件显示的富文本的 TextFlow。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      用于表示该组件显示的富文本的 TextFlow。
     
      <p>TextFlow 是 Text Layout Framework (TLF) 中最重要的类。它是表示富文本内容的 FlowElement 的树的根。</p>
	 
	  <p>通常情况下，使用 <codeph>TextFlowUtil.importFromString()</codeph> 和 <codeph>TextFlowUtil.importFromXML()</codeph> 方法基于 TLF 标记创建 TextFlow。或者，还可以使用 TLF 的 TextConverter 类（可以导入 HTML 的子集），或者对 TextFlow 使用诸如 <codeph>addChild()</codeph> 等方法构建 TextFlow。</p>
     
	  <p>设置该属性会影响 <codeph>text</codeph> 属性，反之亦然。</p>
     
      <p>如果设置 <codeph>textFlow</codeph> 并获得 <codeph>text</codeph>，则各段落中的文本将由单个 LF（“\n”）分隔。</p>
     
      <p>如果将 <codeph>text</codeph> 设置为 String（例如<codeph>“Hello World”</codeph>），并获得 <codeph>textFlow</codeph>，则它将是包含单个 ParagraphElement 和单个 SpanElement 的 TextFlow。</p>
     
      <p>如果文本包含显式换行符 - CR（“\r”）、LF（“\n”）或 CR+LF（“\r\n”）- 则内容将设置为包含多个段落且各段落之间含一个间距的 TextFlow。</p>
     
	  <p>要将 TextFlow 对象变成 TLF 标记，请使用 <codeph>TextFlowUtil.export()</codeph> 标记。</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
  SkinnableDataContainer 类是数据项目的容器基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="focusThickness" owner="spark.components:SkinnableDataContainer" playerVersion="Flash9" type="Number">
<description>
  焦点矩形轮廓的粗细（以像素为单位）。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark" type="uint">
<description>
  当组件处于焦点时，焦点圈的颜色。
 
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的焦点外框的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dataGroup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" required="false" var_type="spark.components:DataGroup">
<description>
      定义 skin 类中的 DataGroup（数据项目将被推入其中，并进行渲染和布置）的必需外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableDataContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableDataContainer
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    dataProvider="null"
    horizontalScrollPosition="null"
    itemRenderer="null"
    itemRendererFunction="null"
    layout="VerticalLayout"
    typicalItem="null"
    verticalScrollPosition="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableDataContainer 类是数据项目的容器基类。SkinnableDataContainer 类将数据项目转换为可视元素以进行显示。尽管此容器可以包含可视元素，但它通常仅用于包含作为子项的数据项目。
 
  <p>SkinnableDataContainer 类充当子数据项目或实现 IVisualElement 接口且为 DisplayObject 的可视元素。数据项目可以是诸如 String 和 Number 对象等的简单数据项目，也可以是诸如 Object 和 XMLNode 对象等的更复杂的数据项目。尽管这些容器可以包含可视元素，但它们通常仅用于包含作为子项的数据项目。</p>
 
  <p>项呈示器定义容器中数据项目的可视表示形式。项呈示器将数据项目转换为可以由容器显示的一种格式。必须将项呈示器传递给 SkinnableDataContainer 才能适当地呈示数据项目。</p>
 
  <p>如果您需要一个数据项目容器而不需要外观，则建议使用 DataGroup（无法对其设置外观）来改善性能和应用程序大小。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.components.xml#DataGroup"><linktext>DataGroup</linktext></link><link href="spark.skins.spark.xml#SkinnableDataContainerSkin"><linktext>spark.skins.spark.SkinnableDataContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  从容器中删除呈示器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  从容器中删除呈示器时分派。<codeph>event.renderer</codeph> 属性包含已删除的呈示器。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  向容器中添加呈示器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  向容器中添加呈示器时分派。<codeph>event.renderer</codeph> 属性包含已添加的呈示器。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableDataContainer:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableDataContainer:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      从指定的数据项中返回该数据项的 String 表示，以供项呈示器显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数据项的 String 表示。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>数据项。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从指定的数据项中返回该数据项的 String 表示，以供项呈示器显示。该方法使用数据项的 <codeph>toString()</codeph> 方法将相应数据项转换为 String 表示。Null 数据项返回空字符串。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableDataContainer:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      更新项呈示器，以备使用或重用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>正在更新的呈示器 
     
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      更新项呈示器，以备使用或重用。如果某项呈示器首次创建或由于虚拟化原因而循环利用，则此 SkinnableDataContainer 实例可以设置项呈示器的 <codeph>label</codeph> 属性和 <codeph>owner</codeph> 属性。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableDataContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.DataGroup#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRenderer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc conref="spark.components.DataGroup#itemRendererFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRendererFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>VerticalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.DataGroup#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.components.DataGroup#typicalItem">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ResizeMode"><apiName>ResizeMode</apiName><shortdesc>
  ResizeMode 类定义模式的枚举，组件使用这些模式按照布局系统指定的尺寸调整其子项的大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ResizeMode 类定义模式的枚举，组件使用这些模式按照布局系统指定的尺寸调整其子项的大小。
 
  <p>组件可以更改它自己的尺寸（<codeph>width</codeph> 和 <codeph>height</codeph>）并相应地重新布局其子项（这是默认的调整大小模式）。</p>
 
  <p>组件的另一个选项是更改其比例，在这种情况下子项根本不需要更改。<codeph>Group</codeph> 支持此选项。</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ResizeMode:NOSCALE"><apiName>NOSCALE</apiName><shortdesc>
      通过更改 width 和 height 调整大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      通过更改 <codeph>width</codeph> 和 <codeph>height</codeph> 调整大小。
     
      <p>组件始终调整它自己的大小，然后按照布局或用户指定的实际大小布置其子项。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ResizeMode:SCALE"><apiName>SCALE</apiName><shortdesc>
      通过设置 scaleX 和 scaleY 属性调整大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      通过设置 <codeph>scaleX</codeph> 和 <codeph>scaleY</codeph> 属性调整大小。
     
      <p>组件始终调整它自己的大小，然后按照其测量大小布置其子项。对该比例进行调整以与由布局或用户指定的大小相匹配。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Scroller"><apiName>Scroller</apiName><shortdesc>
  Scroller 组件显示一个称为视域的单个可滚动组件，以及水平滚动条和垂直滚动条。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="viewport"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指示在哪些条件下会显示垂直滑动条。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（“on”）- 始终显示滚动条。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（“off”）- 从不显示滚动条。通过设置视域的 verticalScrollPosition 属性，仍可以按编程方式滚动视域。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（“auto”）- 当视域的 contentHeight 大于其自身的高度时显示滚动条。
  </li>
  </ul>
 
  <p>
  滚动策略影响 Scroller 组件的测量大小。
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
 </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指示在哪些条件下会显示水平滑动条。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（“on”）- 始终显示滚动条。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（“off”）- 从不显示滚动条。通过设置视域的 horizontalScrollPosition 属性，仍可以按编程方式滚动视域。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（“auto”）- 当视域的 contentWidth 大于其自身的宽度时显示滚动条。
  </li>
  </ul>
 
  <p>
  滚动策略影响 Scroller 组件的测量大小。
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的透明度。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Scroller&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Scroller
   <strong>Properties</strong>
    measuredSizeIncludesScrollBars="true"
    minViewportInset="0"
    viewport="null"
  
    <strong>Styles</strong>
    alignmentBaseline="use_dominant_baseline"
    alternatingItemColors=""
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Times New Roman"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    horizontalScrollPolicy="auto"
    inactiveTextSelection=""
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Scroller 组件显示一个称为视域的单个可滚动组件，以及水平滚动条和垂直滚动条。该视域必须实现 IViewport 接口。其外观必须是 Group 类的派生。
 
  <p>Spark Group、DataGroup 和 RichEditableText 组件实现 IViewport 接口，且可以用作 Scroller 控件的子代，如下例所示：</p>
 
  <pre>
  &lt;s:Scroller width="100" height="100">
       &lt;s:Group> 
          &lt;mx:Image width="300" height="400" 
               source="@Embed(source='assets/logo.jpg')"/> 
       &lt;/s:Group>        
  &lt;/s:Scroller></pre>     
 
  <p>Image 控件的大小比其父 Group 容器设置得大。默认情况下，子代超过父容器的边界。Scroller 会指定将子代剪切到边界并显示滚动条，而不是让子代超过父容器的边界。</p>
 
  <p> </p>
 
  <p> </p>
 
  <p>IViewport 接口为实现该接口的组件定义视域。视区是您希望显示的容器区域的矩形子集，而不是显示整个容器。<codeph/><codeph/><codeph/><codeph/></p>
 
  <p>可以将滚动条与容器视域的显式设置结合使用。视域设置确定视域的初始位置，然后可以使用滚动条移动该位置，如下例所示： </p>
  
  <pre>
  &lt;s:Scroller width="100" height="100">
      &lt;s:Group
          horizontalScrollPosition="50" verticalScrollPosition="50"> 
          &lt;mx:Image width="300" height="400" 
              source="@Embed(source='assets/logo.jpg')"/> 
      &lt;/s:Group>                 
  &lt;/s:Scroller></pre>
 
  <p><codeph/><codeph/><codeph/><codeph/></p>
 
  <p>Scroller 外观布局不能更改。它会无条件地设置为处理滚动策略的私有布局实现。<codeph/><codeph/></p>
 
  <p>Scroller 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ScrollerSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ScrollerExample.mxml"><swfblock conref="examples/ScrollerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link></related-links><apiConstructor id="spark.components:Scroller:Scroller"><apiName>Scroller</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Scroller:addElement"><apiName>addElement</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      如果存在视域，且传入的索引为 0，则返回该视域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果在子列表中不存在该索引位置。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>位于指定索引位置的元素。
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要检索的元素的索引。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果存在视域，且传入的索引为 0，则返回该视域。否则将引发 RangeError。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      如果传入的元素是视域，则返回 0。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果元素不是此对象的子项。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>要标识的元素的索引位置。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>要标识的元素。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果传入的元素是视域，则返回 0。否则将引发 ArgumentError。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElement"><apiName>removeElement</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElements"><apiName>swapElements</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Scroller:measuredSizeIncludesScrollBars:get"><apiName>measuredSizeIncludesScrollBars</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/>
     
      <p>将其内容“回流”以适合可用宽度或高度的组件（例如 TextArea）可以使用该属性稳定其测量大小。默认情况，TextArea 由 <codeph>widthInChars</codeph> 和 <codeph>heightInChars</codeph> 属性定义，但在很多应用程序中，测量大小最好保持不变，即使 TextArea 外观的 Scroller 显示滚动条时也应如此。</p>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:minViewportInset:get"><apiName>minViewportInset</apiName><shortdesc>
      Scroller 的视域与边缘之间的最小空间。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0 
     </apiDefaultValue></apiValueDef><apiDesc>
      Scroller 的视域与边缘之间的最小空间。<codeph/><codeph/>将 ScrollBar 布置为与 Scroller 的边缘对齐。   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:numElements:get"><apiName>numElements</apiName><shortdesc>
      如果存在视域，则返回 1；否则，返回 0。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      如果存在视域，则返回 1；否则，返回 0。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:viewport:get"><apiName>viewport</apiName><shortdesc>
      要滚动的视域组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要滚动的视域组件。
     
      <p>
      设置 <codeph>viewport</codeph> 属性时，视域的 <codeph>clipAndEnableScrolling</codeph> 属性将设置为 true 以启用滚动。Scroller 不支持直接旋转视域。可以任意转换视域的内容，但不能任意转换视域本身。
     </p>
     
      此属性为 Bindable。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:horizontalScrollBar:set"><apiName>horizontalScrollBar</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>spark.components:HScrollBar</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:verticalScrollBar:set"><apiName>verticalScrollBar</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>spark.components:VScrollBar</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VGroup"><apiName>VGroup</apiName><shortdesc>
  VGroup 容器是使用 VerticalLayout 类的 Group 容器的一个实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VGroup
    <strong>Properties</strong>
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedRowCount"-1"
    rowHeight="no default"
    variableRowHeight="true"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  VGroup 容器是使用 VerticalLayout 类的 Group 容器的一个实例。不要修改 <codeph>layout</codeph> 属性。请改用 VGroup 类的属性来修改 VerticalLayout 类的特征。
 
  </apiDesc><example conref="VGroupExample.mxml"><swfblock conref="examples/VGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link></related-links><apiConstructor id="spark.components:VGroup:VGroup"><apiName>VGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。将 <codeph>layout</codeph> 属性初始化为 VerticalLayout 类的一个实例。
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:VGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.VerticalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
    
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
    
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
    
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
    
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="textInput" owner="spark.components:ComboBox" playerVersion="Flash10" required="false" var_type="spark.components:TextInput">
<description>
      包含输入文本或 SelectedItem 文本的可选外观部件. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ComboBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ComboBox
    <strong>Properties</strong>
    itemMatchingFunction="null"
    labelToItemFunction="null"
    maxChars="0"
    openOnInput="true"
    restrict=""
 
    <strong>Styles</strong>
    paddingBottom="3"
    paddingLeft="3"
    paddingRight="3"
    paddingTop="5"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
   
 
  <p/>
 
  <p/>
 
  <p/>
 
  <p/>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry/>
        </row><row>
           <entry>最小大小</entry>
           <entry/>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ComboBoxSkin
                <p/></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ComboBoxExample.mxml"><swfblock conref="examples/ComboBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link><link href="spark.skins.spark.xml#ComboBoxTextInputSkin"><linktext/></link></related-links><apiConstructor id="spark.components:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:ComboBox:protected:findKey"><apiName>findKey</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventCode</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="spark.components:ComboBox:CUSTOM_SELECTED_ITEM"><apiName>CUSTOM_SELECTED_ITEM</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="int"/></apiValueDef><apiDesc>
      <codeph/> 
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:itemMatchingFunction"><apiName>itemMatchingFunction</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
     
      <p> </p>
     
      <p>该回调函数必须具有以下签名： </p>
     
      <pre>
        function myMatchingFunction(comboBox:ComboBox, inputText:String):Vector</pre>
     
      <p>例如，“aRiz”是“Arizona”的匹配项，而“riz”则不是。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:openOnInput"><apiName>openOnInput</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:labelToItemFunction:set"><apiName>labelToItemFunction</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
       
     
      <p>该回调函数必须具有以下签名： </p>
     
      <pre>
        function myLabelToItem(value:String):Object</pre>
     
      <p><codeph/></p>
     
      <p><codeph/> </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:maxChars:set"><apiName>maxChars</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:restrict:set"><apiName>restrict</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
  NavigatorContent 类定义了一个 Spark 容器，可以将该容器用在 MX 导航器容器（例如 ViewStack、TabNavigator 和 Accordion 容器）中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NavigatorContent&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NavigatorContent
    <strong>Properties</strong>
    icon="null"
    label=""
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  NavigatorContent 类定义了一个 Spark 容器，可以将该容器用在 MX 导航器容器（例如 ViewStack、TabNavigator 和 Accordion 容器）中。
 
  <p>不要在 MX 导航器容器外使用 NavigatorContent 容器。</p>
 
  <p>NavigatorContent 容器的创建策略基于其父导航器容器的创建策略： </p>
 
  <ul>
    <li>如果父代的创建策略为无，则 NavigatorContent 的创建策略也为无。</li>
    <li>如果父代的创建策略为全部，则 NavigatorContent 的创建策略也为全部。</li>
    <li>如果父代的创建策略为自动，则 NavigatorContent 的创建策略为无。</li>
  </ul>
 
  <p>NavigatorContent 容器不支持排队的创建策略。</p>
 
  </apiDesc><example conref="NavigatorContentExample.mxml"><swfblock conref="examples/NavigatorContentExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiConstructor id="spark.components:NavigatorContent:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      由某些导航器容器显示的图标的 Class，用于代表此 Container。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      由某些导航器容器显示的图标的 Class，用于代表此 Container。
     
      <p>例如，如果此 Container 是 TabNavigator 的一个子项，则此图标将显示在相应的选项卡中。如果此 Container 是 Accordion 的一个子项，则此图标将显示在相应的标题中。</p>
     
      <p>要将图标嵌入到 SWF 文件中，请使用 @Embed() MXML 编译器指令：</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>图像可以是 JPEG、GIF、PNG、SVG 或 SWF 文件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      由某些导航器容器显示的文本，用于代表此 Container。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      由某些导航器容器显示的文本，用于代表此 Container。
     
      <p>例如，如果此 Container 是 TabNavigator 的一个子项，则此字符串将显示在相应的选项卡中。如果此 Container 是 Accordion 的一个子项，则此字符串将显示在相应的标题中。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextSelectionHighlighting"><apiName>TextSelectionHighlighting</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph/>
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext/></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiValue id="spark.components:TextSelectionHighlighting:ALWAYS"><apiName>ALWAYS</apiName><shortdesc>
      始终显示选择的文本，即使组件没有获得键盘焦点或组件窗口不是活动窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc>
      始终显示选择的文本，即使组件没有获得键盘焦点或组件窗口不是活动窗口。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_ACTIVE"><apiName>WHEN_ACTIVE</apiName><shortdesc>
      只要组件的窗口为活动窗口时，就会显示选择的文本（即使组件没有获得键盘焦点，也会如此）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenActive</apiData><apiType value="String"/></apiValueDef><apiDesc>
      只要组件的窗口为活动窗口时，就会显示选择的文本（即使组件没有获得键盘焦点，也会如此）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_FOCUSED"><apiName>WHEN_FOCUSED</apiName><shortdesc>
      只有在组件具有键盘焦点时，才显示选择的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenFocused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      只有在组件具有键盘焦点时，才显示选择的文本。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VSlider"><apiName>VSlider</apiName><shortdesc>
  使用 VSlider（垂直滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:VSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:VSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Slider</apiBaseClassifier></apiClassifierDef><apiDesc>
  使用 VSlider（垂直滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。滑块轨道从下向上拉伸。滑块的当前值由滑块端点之间滑块的相对位置确定，端点对应于滑块的最小值和最大值。
 
  <p>滑块可以允许最小值和最大值之间连续范围内的值，也可以限制为最小值和最大值之间具体间隔处的值。它可以使用数据提示显示其当前值。</p>
 
  <p>VSlider 控件具备下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>11 个像素宽 × 100 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>11 个像素宽 × 11 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.VSliderSkin
              <p>spark.skins.spark.VSliderThumbSkin</p>
              <p>spark.skins.spark.VSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VSliderExample.mxml"><swfblock conref="examples/VSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VSliderSkin"><linktext>spark.skins.spark.VSliderSkin</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:PopUpPosition"><apiName>PopUpPosition</apiName><shortdesc>
  PopUpAnchor.popUpPosition 属性的枚举类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph>PopUpAnchor.popUpPosition</codeph> 属性的枚举类型。该类型描述了 PopUpAnchor 锚定的 <codeph>popUp</codeph> 控件的位置。该位置与 PopUpAnchor 位置相关。  
    
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:PopUpPosition:ABOVE"><apiName>ABOVE</apiName><shortdesc>
      目标上方的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>above</apiData><apiType value="String"/></apiValueDef><apiDesc>
      目标上方的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:BELOW"><apiName>BELOW</apiName><shortdesc>
      目标下方的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>below</apiData><apiType value="String"/></apiValueDef><apiDesc>
      目标下方的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:CENTER"><apiName>CENTER</apiName><shortdesc>
      位于目标中心的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
      位于目标中心的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:LEFT"><apiName>LEFT</apiName><shortdesc>
      目标左侧的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      目标左侧的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      目标右侧的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      目标右侧的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
      位于目标左上角的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
      位于目标左上角的位置
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataGroup"><apiName>DataGroup</apiName><shortdesc>
  DataGroup 类是数据项目的容器基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:DataGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:DataGroup
    <strong>Properties</strong>
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    typicalItem="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataGroup 类是数据项目的容器基类。DataGroup 类将数据项目转换为可视元素以进行显示。尽管此容器可以包含可视元素，但它通常仅用于包含作为子项的数据项目。
 
  <p>DataGroup 类充当子数据项目或实现 IVisualElement 接口且为 DisplayObject 的可视元素。数据项目可以是诸如 String 和 Number 对象等的简单数据项目，也可以是诸如 Object 和 XMLNode 对象等的更复杂的数据项目。尽管这些容器可以包含可视元素，但它们通常仅用于包含作为子项的数据项目。</p>
 
  <p>项呈示器定义容器中数据项目的可视表示形式。项呈示器将数据项目转换为可以由容器显示的一种格式。必须将项呈示器传递给 DataGroup 容器才能适当地呈示数据项目。</p>
 
  <p>为了改进性能和最小化应用程序大小，不能设置 DataGroup 容器的外观。如果希望应用外观，请改用 SkinnableDataContainer。 </p>
 
  </apiDesc><example conref="DataGroupExample.mxml"><swfblock conref="examples/DataGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer"><linktext>spark.skins.spark.DefaultItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultComplexItemRenderer"><linktext>spark.skins.spark.DefaultComplexItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  从此 dataGroup 删除呈示器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  从此 dataGroup 删除呈示器时分派。<codeph>event.renderer</codeph> 是已删除的呈示器。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  将呈示器添加到此 dataGroup 时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  将呈示器添加到此 dataGroup 时分派。<codeph>event.renderer</codeph> 是已添加的呈示器。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGroup:DataGroup"><apiName>DataGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGroup:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      
      返回可在项呈示器中显示的 String。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>可在项呈示器中显示的 String。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要显示的数据项目。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回可在项呈示器中显示的 String。将 String 写入到项呈示器的 <codeph>labelText</codeph> 属性。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      
      更新呈示器以重用。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>项呈示器。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      更新呈示器以重用。
     
      <p/>    
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGroup:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      此 DataGroup 的数据提供程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      此 DataGroup 的数据提供程序。它必须为 IList。
     
      <p>在 Flex 框架中包含多个 IList 实现，包括 ArrayCollection、ArrayList 和 XMLListCollection。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGroup/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#DataGroup/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGroup:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      用于数据项目的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于数据项目的项呈示器。该类必须实现 IDataRenderer 接口。如果已定义，则 <codeph>itemRendererFunction</codeph> 属性优先于此属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc>
      为某个特定项目返回一个项呈示器 IFactory 的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      为某个特定项目返回一个项呈示器 IFactory 的函数。应该定义一个与此示例函数类似的呈示器函数：
      
      <pre>
        function myItemRendererFunction(item:Object):IFactory</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      当需要固定的行或列大小时，布局使用 typicalItem 的首选大小，但不设置某个特定的 rowHeight 或 columnWidth 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当需要固定的行或列大小时，布局使用 <codeph>typicalItem</codeph> 的首选大小，但不设置某个特定的 <codeph>rowHeight</codeph> 或 <codeph>columnWidth</codeph> 值。同样，虚拟布局使用此项目来定义未滚动到视图中的布局元素的大小。
     
      <p>该容器使用典型数据项目和关联的项呈示器来确定容器子项的默认大小。通过定义典型项目，容器不必在屏幕上绘制每个子项时来调整其大小。</p>
     
      <p>设置此属性会设置布局的 <codeph>typicalLayoutElement</codeph> 属性。</p>
     
      <p>限制：如果 <codeph>typicalItem</codeph> 是 IVisualItem，则它不能同时是数据提供程序的成员。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
  ToggleButton 组件定义切换按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ToggleButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButton/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleButton 组件定义切换按钮。单击该按钮会在弹起状态和按下状态之间进行切换。如果在按钮处于弹起状态时单击该按钮，则它会切换到按下状态。必须再次单击该按钮才可将其切换回弹起状态。
 
  <p>可以使用 <codeph>selected</codeph> 属性以编程方式获取或设置此状态。</p>
 
  <p>ToggleButton 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示控件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>21 个像素宽 × 21 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ToggleButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ToggleButtonExample.mxml"><swfblock conref="examples/ToggleButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ToggleButtonSkin"><linktext>spark.skins.spark.ToggleButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleButton:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:HSlider"><apiName>HSlider</apiName><shortdesc>
  使用 HSlider（水平滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:HSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Slider</apiBaseClassifier></apiClassifierDef><apiDesc>
  使用 HSlider（水平滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。HSlider 控件采用水平方向。滑块轨道从左向右拉伸。滑块的当前值由滑块端点之间滑块的相对位置确定，端点对应于滑块的最小值和最大值。
 
  <p>滑块可以允许最小值和最大值之间连续范围内的值，也可以限制为最小值和最大值之间特定间隔处的值。滑块可以包含数据提示以显示其当前值。</p>
 
  <p>HSlider 控件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>100 个像素宽 × 11 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>100 个像素宽 × 100 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.HSliderSkin
              <p>spark.skins.spark.HSliderThumbSkin</p>
              <p>spark.skins.spark.HSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HSliderExample.mxml"><swfblock conref="examples/HSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HSliderSkin"><linktext>spark.skins.spark.HSliderSkin</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  HScrollBar（水平 ScrollBar）控件可以在因数据太多而不能在显示区域中以水平方向完全显示时控制显示的数据部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;s:HScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:HScrollBar
 
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  HScrollBar（水平 ScrollBar）控件可以在因数据太多而不能在显示区域中以水平方向完全显示时控制显示的数据部分。
 
  <p>尽管可以使用 HScrollBar 控件作为独立控件，但通常将其结合作为另一组组件的一部分来提供滚动功能。</p>
 
  <p>HScrollBar 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>85 个像素宽 × 15 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>35 个像素宽 × 35 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.HScrollBarSkin
              <p>spark.skins.spark.HScrollBarThumbSkin</p>
              <p>spark.skins.spark.HScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HScrollBarSkin"><linktext>spark.skins.spark.HScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:HScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      如果 viewport 为非 null，将通过滚动视域更改水平滚动位置以实现向上或向下翻页的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>页面滚动是向上 (<codeph>true</codeph>) 还是向下 (<codeph>false</codeph>)。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>viewport</codeph> 为非 null，将通过滚动视域更改水平滚动位置以实现向上或向下翻页的操作。此方法通过使用 <codeph>flash.ui.Keyboard.PAGE_UP</codeph> 或 <codeph>flash.ui.Keyboard.PAGE_DOWN</codeph> 调用 <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph> 方法来计算要滚动的数量。它接着调用 <codeph>setValue()</codeph> 方法以将 <codeph>IViewport.horizontalScrollPosition</codeph> 属性设置为相应的值。
     
      <p>如果 <codeph>viewport</codeph> 为 null，则调用 <codeph>changeValueByPage()</codeph> 方法更改滚动位置以实现向上或向下翻页的操作。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBar/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBar.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      如果 viewport 为非 null，将通过滚动视域更改水平滚动位置以实现上移行或下移行的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>行滚动是向上 (<codeph>true</codeph>) 还是向下 (<codeph>false</codeph>)。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>viewport</codeph> 为非 null，将通过滚动视域更改水平滚动位置以实现上移行或下移行的操作。此方法通过使用 <codeph>flash.ui.Keyboard.RIGHT</codeph> 或 <codeph>flash.ui.Keyboard.LEFT</codeph> 调用 <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph> 方法来计算要滚动的数量。它接着调用 <codeph>setValue()</codeph> 方法以将 <codeph>IViewport.horizontalScrollPosition</codeph> 属性设置为相应的值。
     
      <p>如果 <codeph>viewport</codeph> 为 null，则调用 <codeph>changeValueByStep()</codeph> 方法更改滚动位置以实现上移行或下移行的操作。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      更新 value 属性，并且如果 viewport 为非 null，则将其 horizontalScrollPosition 设置为 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> 属性的新值。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      更新 <codeph>value</codeph> 属性，并且如果 viewport 为非 null，则将其 <codeph>horizontalScrollPosition</codeph> 设置为 <codeph>value</codeph>。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#HScrollBar/viewport"><linktext>视域</linktext></link></related-links></apiOperation><apiValue id="spark.components:HScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      由此滚动条控制的视域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      由此滚动条控制的视域。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  RadioButtonGroup 组件定义一组 RadioButton 组件，这些组件相互排斥；因此，用户每次只能选择一个 RadioButton 组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true"
    selectedValue="null"
    selection="null"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButtonGroup 组件定义一组 RadioButton 组件，这些组件相互排斥；因此，用户每次只能选择一个 RadioButton 组件。使用 <codeph>&lt;s:RadioButtonGroup></codeph> 标签定义组名称时，需要使用 <codeph>id</codeph> 属性。添加到该组中的任何 <codeph>&lt;s:RadioButton></codeph> 组件都将拥有此组名称。
 
  <p>注意，RadioButtonGroup 组件是 EventDispatcher 的子类，而不是 UIComponent 的子类，并实现 IMXMLObject 接口。所有其它 Flex 可视组件实现 IVisualElement 接口。RadioButtonGroup 组件声明必须包含在 <codeph>&lt;Declarations></codeph> 标签内，因为不可以将该组件声明指定给 IVisualElement。</p> 
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  当以编程方式或通过用户交互更改值时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当以编程方式或通过用户交互更改值时分派。
 
  <p>由于以编程方式进行更改会触发此事件，所以请确保任何 <codeph>valueCommit</codeph> 事件处理函数都不会更改可引发另一 <codeph>valueCommit</codeph> 事件的值。例如，不要在 <codeph>valueCommit</codeph> 事件处理函数中更改 <codeph>selectedValue</codeph> 属性或 <codeph>selection</codeph> 属性。 </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  用户在组中选择 RadioButton 组件时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户在组中选择 RadioButton 组件时分派。您也可以为各个 RadioButton 组件设置处理函数。仅当用户使用鼠标与单选按钮交互时，才分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  此组中所选 RadioButton 组件的值更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  此组中所选 RadioButton 组件的值更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>在类扩展 EventDispatcher 的简单情况下，不使用 <codeph>document</codeph> 参数。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="spark.components:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      返回指定索引处的 RadioButton 组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>当索引位于 0 和 <codeph>numRadioButtons</codeph> 之间时，指定的 RadioButton 组件为 1。如果索引无效，则返回 <codeph>null</codeph>。
     
      </apiDesc><apiOperationClassifier>spark.components:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>RadioButtonGroup 中的 RadioButton 的从零开始的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定索引处的 RadioButton 组件。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="spark.components.numRadioButtons.xml"><linktext>numRadioButtons</linktext></link></related-links></apiOperation><apiOperation id="spark.components:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      IMXMLObject.initialized() 方法的实现支持延迟的实例化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>创建此对象的 MXML 文档。
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>文档用来引用此对象的标识符。如果此对象是文档上的深层属性，则 <codeph>id</codeph> 为 null。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>IMXMLObject.initialized()</codeph> 方法的实现支持延迟的实例化。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IMXMLObject.xml"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="spark.components:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      确定是否允许选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定是否允许选择。请注意，返回的值仅反映对 <codeph>RadioButtonGroup</codeph> 显式设置的值，而不反映对各个 RadioButton 显式设置的任何值。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      属于此 RadioButtonGroup 的 RadioButton 数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"0"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      属于此 RadioButtonGroup 的 RadioButton 数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      组中所选 RadioButton 组件的 Value 属性（如果未设置），否则为所选 RadioButton 组件的 Label 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      组中所选 RadioButton 组件的 <codeph>value</codeph> 属性（如果未设置），否则为所选 RadioButton 组件的 <codeph>label</codeph> 属性。如果未选择任何 RadioButton，则此属性为 <codeph>null</codeph>。
     
      <p>如果设置了 <codeph>selectedValue</codeph>，则 Flex 会选择 <codeph>value</codeph> 或 <codeph>label</codeph> 属性与此值匹配的第一个 RadioButton 组件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      包含对组中当前所选 RadioButton 组件的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      包含对组中当前所选 RadioButton 组件的引用。您只能在 ActionScript 中访问此属性；在 MXML 中此属性不可设置。将此属性设置为 <codeph>null</codeph> 可取消对当前所选 RadioButton 组件的选择。不分派 change 事件。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  VScrollBar（垂直 ScrollBar）控件可以在因数据太多而不能在显示区域中以垂直方向完全显示时控制显示的数据部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;s:VScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:VScrollBar
 
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
   
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  VScrollBar（垂直 ScrollBar）控件可以在因数据太多而不能在显示区域中以垂直方向完全显示时控制显示的数据部分。
 
  <p>虽然 VScrollBar 控件可以单独使用，但通常将它与其它组件一起使用来提供滚动功能。</p>
 
  <p>VScrollBar 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>15 个像素宽 × 85 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>15 个像素宽 × 15 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.VScrollBarSkin
              <p>spark.skins.spark.VScrollBarThumbSkin</p>
              <p>spark.skins.spark.VScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VScrollBarSkin"><linktext>spark.skins.spark.VScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      如果 viewport 为非 null，将通过滚动视域更改垂直滚动位置以实现向上或向下翻页的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>页面滚动是向上 (<codeph>true</codeph>) 还是向下 (<codeph>false</codeph>)。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>viewport</codeph> 为非 null，请通过滚动视域更改垂直滚动位置以实现向上或向下翻页的操作。此方法通过使用 <codeph>flash.ui.Keyboard.PAGE_UP</codeph> 或 <codeph>flash.ui.Keyboard.PAGE_DOWN</codeph> 调用 <codeph>IViewport.getVerticalScrollPositionDelta()</codeph> 方法来计算要滚动的数量。它接着调用 <codeph>setValue()</codeph> 方法以将 <codeph>IViewport.verticalScrollPosition</codeph> 属性设置为相应的值。
     
      <p>如果 <codeph>viewport</codeph> 为 null，则调用 <codeph>changeValueByPage()</codeph> 方法会更改垂直滚动位置以实现向上或向下翻页的操作。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBar/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBar.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      如果 viewport 为非 null，将通过滚动视域更改垂直滚动位置以实现上移行或下移行的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>行滚动是向上 (<codeph>true</codeph>) 还是向下 (<codeph>false</codeph>)。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>viewport</codeph> 为非 null，将通过滚动视域更改垂直滚动位置以实现上移行或下移行的操作。此方法通过使用 <codeph>flash.ui.Keyboard.RIGHT</codeph> 或 <codeph>flash.ui.Keyboard.LEFT</codeph> 调用 <codeph>IViewport.getVerticalScrollPositionDelta()</codeph> 方法来计算要滚动的数量。它接着调用 <codeph>setValue()</codeph> 方法以将 <codeph>IViewport.verticalScrollPosition</codeph> 属性设置为相应的值。
     
      <p>如果 <codeph>viewport</codeph> 为 null，则调用 <codeph>changeValueByStep()</codeph> 方法会更改垂直滚动位置以实现上移行或下移行的操作。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      更新 value 属性，并且如果 viewport 为非 null，则将其 verticalScrollPosition 设置为 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> 属性的新值。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      更新 value 属性，并且如果 <codeph>viewport</codeph> 为非 null，则将其 <codeph>verticalScrollPosition</codeph> 设置为 <codeph>value</codeph>。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VScrollBar/viewport"><linktext>视域</linktext></link></related-links></apiOperation><apiValue id="spark.components:VScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      由此滚动条控制的视域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      由此滚动条控制的视域。
      
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="source"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  <p><codeph>VideoPlayer</codeph> 是可设置外观的版本。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.VideoPlayer.xml"><linktext>mx.components.VideoPlayer</linktext></link></related-links><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.DurationChangeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.DurationChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph/>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.PlayheadChangeEvent.PLAYHEAD_CHANGE_playheadChange"><apiName>playheadChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.PlayheadChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph/><codeph/>
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.PlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_flash.events.ProgressEvent_bytesDownloadedChange"><apiName>bytesDownloadedChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent</apiEventType><adobeApiEventClassifier>org.osmf.events.BytesDownloadedChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      在不移动播放头情况下暂停回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在不移动播放头情况下暂停回放。如果回放已经暂停或停止，此方法无效。  
           <p>若要再次开始回放，请调用 <codeph>play()</codeph> 方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      让视频播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      让视频播放。可以在视频暂停、停止或正在播放时调用。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:seek"><apiName>seek</apiName><shortdesc>
      搜寻到视频中的给定秒。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>seconds
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      搜寻到视频中的给定秒。如果视频正在播放，请从该点继续播放。如果视频已暂停，则搜寻到该点并保持暂停。如果视频已停止，则搜寻到该点并进入暂停状态。使用实时流时，不起任何作用。
           <p>如果时间小于 0 或 NaN，则会抛出异常。如果时间已超过流的结束处，或超过到目前为止已下载的文件的数量，则将尝试搜寻，并将在失败时恢复。</p>
     
      <p>在调用一种搜索方法或者设置 <codeph>playheadTime</codeph> 以引发搜索后，<codeph>playheadTime</codeph> 属性可能不会立即包含预期值。对于渐进式下载，由于只能搜索关键帧，因此搜索将转到指定时间后第一个关键帧的时间。</p>
      
      <p><b>注意</b>：对于流式下载，搜索总是转到指定的确切时间，即使 FLV 源文件在此处没有关键帧也是如此。</p>
           <p>由于搜索是异步执行的，因此，如果调用 seek 方法或者设置 <codeph>playheadTime</codeph> 属性，则 <codeph>playheadTime</codeph> 将不会立即更新。 若要在搜索完成后获得这一时间，需要侦听 <codeph>seek</codeph> 事件，该事件只在 <codeph>playheadTime</codeph> 属性更新后才启动。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      停止视频回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      停止视频回放。 如果 <codeph>autoRewind</codeph> 设置为 <codeph>true</codeph>，则后退到第一帧。 如果视频已经停止，则此方法没有任何作用。若要再次开始播放，请调用 <codeph>play()</codeph>。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="spark.components:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      指定设置 source 属性后视频是否应立即开始播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定设置 <codeph>source</codeph> 属性后视频是否应立即开始播放。如果为 <codeph>true</codeph>，则视频文件立即开始缓冲并播放。
           <p>即使 <codeph>autoPlay</codeph> 设置为 <codeph>false</codeph>，在调用 <codeph>initialize()</codeph> 方法后 Flex 也会开始加载视频。对于 Flash Media Server，这意味着创建流并加载要显示的第一个帧。对于 HTTP 下载，Flex 则开始下载流并显示第一帧。</p>
     
      <codeph/><codeph/><codeph/>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      指定当播放停止时是否应通过调用 stop() 方法或到达流末尾使 FLV 文件后退到第一帧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定当播放停止时是否应通过调用 <codeph>stop()</codeph> 方法或到达流末尾使 FLV 文件后退到第一帧。
           <p>此属性对实时流视频不起作用。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:currentTime:get"><apiName>currentTime</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:duration:get"><apiName>duration</apiName><shortdesc>
      
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:loop:get"><apiName>loop</apiName><shortdesc>
      指示回放已完成之后媒体是否应该重新播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指示回放已完成之后媒体是否应该重新播放。<codeph>loop</codeph> 属性优先于 <codeph>autoRewind</codeph> 属性，因此如果将 loop 设置为 <codeph>true</codeph>，则会忽略 <codeph>autoRewind</codeph> 属性。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:muted:get"><apiName>muted</apiName><shortdesc>
      设置为 true 会使视频静音，设置为 false 将取消视频的静音。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      设置为 <codeph>true</codeph> 会使视频静音，设置为 <codeph>false</codeph> 将取消视频的静音。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/><codeph/><codeph/>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      如果视频正在播放或正在尝试播放，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果视频正在播放或正在尝试播放，则返回 true。
      
      <p/> 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link><link href="spark.components.xml#VideoDisplay/pause()"><linktext>pause()</linktext></link><link href="spark.components.xml#VideoDisplay/stop()"><linktext>stop()</linktext></link><link href="spark.components.xml#VideoDisplay/autoPlay"><linktext>autoPlay</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>letterbox
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/><codeph/><codeph/><codeph/><codeph/>
     
      <p/>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      对于渐进式下载，源仅是指定要播放的视频文件的路径或 URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      对于渐进式下载，源仅是指定要播放的视频文件的路径或 URL。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:videoObject:get"><apiName>videoObject</apiName><shortdesc>
      基础 flash player flash.media.Video 对象
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/></apiValueDef><apiDesc>
      基础 flash player flash.media.Video 对象
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      音量级别，指定一个介于 0 和 1 之间的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      音量级别，指定一个介于 0 和 1 之间的值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownList"><apiName>DropDownList</apiName><shortdesc>
  DropDownList 控件包含下拉列表，用户可从中选择单个值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:DropDownList" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      包含选定项目的提示或文本的可选外观部件。 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownList&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DropDownList 
    <strong>Properties</strong>
    prompt=""
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownList 控件包含下拉列表，用户可从中选择单个值。其功能与 HTML 中 SELECT 表单元素的功能非常相似。
   <p>DropDownList 控件由锚点按钮、提示区域和下拉列表组成，使用锚点按钮可打开和关闭下拉列表。提示区域显示一个提示 String，或者显示下拉列表中的选定项目。</p>
   <p>打开下拉列表时：</p>
  <ul>
    <li>单击锚点按钮会关闭下拉列表并提交当前选定的数据项目。</li>
    <li>在下拉列表之外单击会关闭下拉列表并提交当前选定的数据项目。</li>
    <li>在某个数据项目上单击会选中该项目并关闭下拉列表。</li>
    <li>如果 <codeph>requireSelection</codeph> 属性为 <codeph>false</codeph>，则按下 Ctrl 键的同时单击某个数据项目会取消选中该项目并关闭下拉列表。</li>
  </ul>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><apiConstructor id="spark.components:DropDownList:DropDownList"><apiName>DropDownList</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DropDownList:prompt:get"><apiName>prompt</apiName><shortdesc>
      DropDownList 控件的提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           
      </apiDefaultValue></apiValueDef><apiDesc>
      DropDownList 控件的提示。提示是当 <codeph>selectedIndex</codeph> = -1 时在 DropDownList 中显示的 String。它通常是一个类似于“Select one...”的 String。选择下拉列表中的某个项目会使用选定项目中的文本替换该提示。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="selectedItems"/><Exclude kind="property" name="selectedIndices"/><Exclude kind="property" name="dropEnabled"/><Exclude kind="property" name="dragMoveEnabled"/><Exclude kind="property" name="dragEnabled"/><Exclude kind="property" name="allowMultipleSelection"/><skinStates><SkinState name="open" owner="spark.components:DropDownListBase" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:DropDownListBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的投影的可见性。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:DropDownListBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的角的半径。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropDown" owner="spark.components:DropDownListBase" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      定义下拉列表区域的外观部件。 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="openButton" owner="spark.components:DropDownListBase" playerVersion="Flash10" required="true" var_type="spark.components.supportClasses:ButtonBase">
<description>
      定义锚点按钮的外观部件。  
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
   <pre>
  &lt;s:DropDownListBase 
    <strong>Properties</strong>
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  其功能与 HTML 中 SELECT 表单元素的功能非常相似。
   <p> 
  </p>
   <p>打开下拉列表时：</p>
  <ul>
    <li>单击锚点按钮会关闭下拉列表并提交当前选定的数据项目。</li>
    <li>在下拉列表之外单击会关闭下拉列表并提交当前选定的数据项目。</li>
    <li>在某个数据项目上单击会选中该项目并关闭下拉列表。</li>
    <li>如果 <codeph>requireSelection</codeph> 属性为 <codeph>false</codeph>，则按下 Ctrl 键的同时单击某个数据项目会取消选中该项目并关闭下拉列表。</li>
  </ul>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components:DropDownListBase_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  当用户单击锚点按钮以显示下拉列表时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户单击锚点按钮以显示下拉列表时分派。用户使用 Control-Down 打开 dropDown 时也会分派它。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DropDownListBase_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当因以下任何原因关闭下拉列表时分派：用户选择下拉列表中的某个项目。在下拉列表外部单击。在显示下拉列表时单击锚点按钮。
  
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当因以下任何原因关闭下拉列表时分派：用户
  <ul>
      <li>选择下拉列表中的某个项目。</li>
      <li>在下拉列表外部单击。</li>
      <li>在显示下拉列表时单击锚点按钮。</li>
  </ul>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DropDownListBase:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DropDownListBase:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      关闭下拉列表并分派 DropDownEvent.CLOSE 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>如果为 <codeph>true</codeph>，请提交选定的数据项目。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      关闭下拉列表并分派 <codeph>DropDownEvent.CLOSE</codeph> 事件。 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DropDownListBase:protected:findKey"><apiName>findKey</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventCode</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="spark.components:DropDownListBase:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      打开下拉列表并分派 DropdownEvent.OPEN 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      打开下拉列表并分派 <codeph>DropdownEvent.OPEN</codeph> 事件。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DropDownListBase:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      用于处理所有鼠标、键盘和焦点用户交互的 DropDownController 类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:DropDownController</apiValueClassifier></apiValueDef><apiDesc>
      用于处理所有鼠标、键盘和焦点用户交互的 DropDownController 类的实例。在构造函数中创建 DropDownController 实例之后，Flex 调用 <codeph>initializeDropDownController()</codeph> 方法。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DropDownListBase:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Border"><apiName>Border</apiName><shortdesc>
  Border 类定义一组 CSS 样式，用于控制容器的边框外观和背景填充。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Border" playerVersion="Flash10" type="Boolean">
<description>
  如果为 <codeph>true</codeph>，则容器包含可见投影。
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Border" playerVersion="Flash10" type="Number">
<description>
  边框圆角半径。
   </description>
<default>0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderWeight" owner="spark.components:Border" playerVersion="Flash10" type="Number">
<description>
  边框笔触粗细。 
   </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Border" playerVersion="Flash10" type="Boolean">
<description>
  确定边框是否可见。如果为 <codeph>false</codeph>，则除了使用 <codeph>borderStroke</codeph> 属性设置的边框可见外，其他边框均不可见。 
   
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="inset,solid" inherit="no" name="borderStyle" owner="spark.components:Border" playerVersion="Flash10" type="String">
<description>
  边框样式。可能的值为 <codeph>"solid"</codeph> 和 <codeph>"inset"</codeph>。
 
  </description>
<default>solid
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Border" playerVersion="Flash10" type="uint">
<description>
  边框颜色。
  
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Border" playerVersion="Flash10" type="Number">
<description>
  由 <codeph>borderColor</codeph> 样式定义的颜色的透明度级别。有效值范围是 0.0 到 1.0。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="scale,clip,repeat" inherit="no" name="backgroundImageFillMode" owner="spark.components:Border" playerVersion="Flash10" type="String">
<description>
  确定背景图像填充尺寸的方式。如果在 MXML 中设置此属性的值，则使用字符串（如“repeat”）。如果在 ActionScript 中设置此属性的值，则使用该常量（如 <codeph>BitmapFillMode.CLIP</codeph>）。
 
  <p>设置为 <codeph>BitmapFillMode.CLIP</codeph>（“clip”）时，图像在区域的边缘处结束。</p>
 
  <p>设置为 <codeph>BitmapFillMode.REPEAT</codeph>（“repeat”）时，位图将重复以填充区域。</p>
   <p>设置为 <codeph>BitmapFillMode.SCALE</codeph>（“scale”）时，图像将拉伸以填充区域。</p>
 
  </description>
<default>&lt;code>BitmapFillMode.SCALE&lt;/code>
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="spark.components:Border" playerVersion="Flash10" type="Object">
<description>
  容器的背景图像。您可以同时设置 <codeph>backgroundColor</codeph> 和 <codeph>backgroundImage</codeph>。背景图像显示在背景色上面。默认值为 <codeph>undefined</codeph>，表示“未设置”。如果此样式和 <codeph>backgroundColor</codeph> 样式都未定义，则控件将采用透明背景。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:Border&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
   <pre>
  &lt;mx:Border
    <b>Properties</b>
    backgroundFill="null"
    borderStroke="null"
 
    <b>Styles</b>
    backgroundImage="undefined"
    backgroundImageFillMode="scale"
    borderAlpha="1.0"
    borderColor="0xB7BABC"
    borderStyle="solid"
    borderVisible="true"
    borderWeight="1"
    cornerRadius="0"
    dropShadowVisible="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Border 类定义一组 CSS 样式，用于控制容器的边框外观和背景填充。 
   <p><b/></p>
  
  <p>Border 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>112 个像素 × 112 个像素</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>无限制</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="BorderExample.mxml"><swfblock conref="examples/BorderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#BorderSkin"><linktext>spark.skins.spark.BorderSkin</linktext></link></related-links><apiConstructor id="spark.components:Border:Border"><apiName>Border</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Border:backgroundFill:get"><apiName>backgroundFill</apiName><shortdesc>
      定义 Border 的背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IFill"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      定义 Border 的背景。设置此属性将覆盖 <codeph>backgroundAlpha</codeph>、<codeph>backgroundColor</codeph>、<codeph>backgroundImage</codeph> 和 <codeph>backgroundImageFillMode</codeph> 样式。
     
      <p>下例使用 <codeph>backgroundFill</codeph> 属性将背景色设置为红色：</p>
           <pre>
      &lt;s:Border cornerRadius="10"> 
         &lt;s:backgroundFill> 
             &lt;s:SolidColor 
                 color="red" 
                 alpha="100"/> 
         &lt;/s:backgroundFill> 
      &lt;/s:Border> </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Border:borderStroke:get"><apiName>borderStroke</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IStroke"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      设置此属性将覆盖 <codeph>borderAlpha</codeph>、<codeph>borderColor</codeph>、<codeph>borderStyle</codeph>、<codeph>borderVisible</codeph> 和 <codeph>borderWeight</codeph> 样式。  
     
      <p>以下是设置 <codeph>borderStroke</codeph> 属性的示例：</p>
           <pre>
      &lt;s:Border cornerRadius="10"> 
         &lt;s:borderStroke> 
             &lt;mx:SolidColorStroke 
                 color="black" 
                 weight="3"/> 
         &lt;/s:borderStroke> 
      &lt;/s:Border> </pre>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TileGroup"><apiName>TileGroup</apiName><shortdesc>
  TileGroup 容器是使用 TileLayout 类的 Group 容器的一个实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TileGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TileGroup
    <strong>Properties</strong>
    columnAlign="left"
    columnCount="-1"
    columnWidth="0"
    horizontalAlign="justify"
    horizontalGap="6"
    orientation="rows"
    requestedColumnCount"-1"
    requestedRowCount="-1"
    rowAlign="top"
    rowCount="-1"
    rowHeight="0"
    verticalAlign="justify"
    verticalGap="6"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileGroup 容器是使用 TileLayout 类的 Group 容器的一个实例。不要修改 <codeph>layout</codeph> 属性。请改用 TileGroup 类的属性来修改 TileLayout 类的特征。
 
  </apiDesc><example conref="TileGroupExample.mxml"><swfblock conref="examples/TileGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link></related-links><apiConstructor id="spark.components:TileGroup:TileGroup"><apiName>TileGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。将 <codeph>layout</codeph> 属性初始化为 TileLayout 类的一个实例。
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:TileGroup:columnAlign:get"><apiName>columnAlign</apiName><shortdesc conref="spark.layouts.TileLayout#columnAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.TileLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.TileLayout#columnWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalGap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:orientation:get"><apiName>orientation</apiName><shortdesc conref="spark.layouts.TileLayout#orientation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"rows"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#orientation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowAlign:get"><apiName>rowAlign</apiName><shortdesc conref="spark.layouts.TileLayout#rowAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.TileLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.TileLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalGap:get"><apiName>verticalGap</apiName><shortdesc conref="spark.layouts.TileLayout#verticalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalGap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>