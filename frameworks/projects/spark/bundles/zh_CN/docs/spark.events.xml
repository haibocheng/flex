<?xml version="1.0"?>
<apiPackage id="spark.events"><apiName>spark.events</apiName><apiDetail/><apiClassifier id="spark.events:ElementExistenceEvent"><apiName>ElementExistenceEvent</apiName><shortdesc>
  ElementExistenceEvent 类表示创建或破坏 Group 的元素时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  ElementExistenceEvent 类表示创建或破坏 Group 的元素时分派的事件。 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link></related-links><adobeApiEvent id="spark.events:ElementExistenceEvent:ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:ElementExistenceEvent:ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events:ElementExistenceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:ElementExistenceEvent:ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:ElementExistenceEvent:ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events:ElementExistenceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:ElementExistenceEvent:ElementExistenceEvent"><apiName>ElementExistenceEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiData>null</apiData><apiDesc>对已添加或删除的元素的引用。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>指向已添加或删除元素的位置的索引。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:ElementExistenceEvent:ELEMENT_ADD"><apiName>ELEMENT_ADD</apiName><shortdesc>
      ElementExistenceEvent.ELEMENT_ADD 常量可为 elementAdd 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>elementAdd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>ElementExistenceEvent.ELEMENT_ADD</codeph> 常量可为 <codeph>elementAdd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>element</codeph></entry><entry>包含对已添加的视觉元素的引用。</entry></row><row><entry><codeph>index</codeph></entry><entry>指向已添加视觉元素的位置的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ElementExistenceEvent:ELEMENT_REMOVE"><apiName>ELEMENT_REMOVE</apiName><shortdesc>
      ElementExistenceEvent.ELEMENT_REMOVE 常量可为 elementRemove 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>elementRemove</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>ElementExistenceEvent.ELEMENT_REMOVE</codeph> 常量可为 <codeph>elementRemove</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>element</codeph></entry><entry>对将要删除的可视元素的引用。</entry></row><row><entry><codeph>index</codeph></entry><entry>正在删除的可视元素的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ElementExistenceEvent:element"><apiName>element</apiName><shortdesc>
      对已添加或删除的视觉元素的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      对已添加或删除的视觉元素的引用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ElementExistenceEvent:index"><apiName>index</apiName><shortdesc>
      指向已添加或删除元素的位置的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      指向已添加或删除元素的位置的索引。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:DropDownEvent"><apiName>DropDownEvent</apiName><shortdesc>
  DropDownEvent 类表示传递给 open 和 close 事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownEvent 类表示传递给 <codeph>open</codeph> 和 <codeph>close</codeph> 事件的事件侦听器的事件对象。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.events:DropDownEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:DropDownEvent:CLOSE</apiEventType><adobeApiEventClassifier>spark.events:DropDownEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:DropDownEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:DropDownEvent:OPEN</apiEventType><adobeApiEventClassifier>spark.events:DropDownEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:DropDownEvent:DropDownEvent"><apiName>DropDownEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
           </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
           </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
           </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>指示触发事件的输入操作类型的值
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:DropDownEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
      DropDownEvent.CLOSE 常量可为 close 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>DropDownEvent.CLOSE</codeph> 常量可为 <codeph>close</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>指示触发事件的输入操作类型的值。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:DropDownEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
      DropDownEvent.OPEN 常量可为 open 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>DropDownEvent.OPEN</codeph> 常量可为 <codeph>open</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>指示触发事件的输入操作类型的值。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:DropDownEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
      如果控件打开或关闭以响应用户操作，则此属性包含指示输入操作类型的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      如果控件打开或关闭以响应用户操作，则此属性包含指示输入操作类型的值。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:IndexChangeEvent"><apiName>IndexChangeEvent</apiName><shortdesc>
  IndexChangeEvent 类表示 Spark 组件中的索引发生更改时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  IndexChangeEvent 类表示 Spark 组件中的索引发生更改时分派的事件。
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ListBase"><linktext>spark.components.supportClasses.ListBase</linktext></link><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link></related-links><adobeApiEvent id="spark.events:IndexChangeEvent:CARET_CHANGE_caretChange"><apiName>caretChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:IndexChangeEvent:CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events:IndexChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:IndexChangeEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:IndexChangeEvent:CHANGE</apiEventType><adobeApiEventClassifier>spark.events:IndexChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:IndexChangeEvent:CHANGING_changing"><apiName>changing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:IndexChangeEvent:CHANGING</apiEventType><adobeApiEventClassifier>spark.events:IndexChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:IndexChangeEvent:IndexChangeEvent"><apiName>IndexChangeEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
           </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
           </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
           </apiDesc></apiParam><apiParam><apiItemName>oldIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>进行更改之前的从零开始的索引。
           </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>进行更改之后的从零开始的索引。
           
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:IndexChangeEvent:CARET_CHANGE"><apiName>CARET_CHANGE</apiName><shortdesc>
      IndexChangeEvent.CARET_CHANGE 常量为 caretChange 事件定义事件对象的 type 属性值，指示处于焦点的当前项目将要更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caretChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>IndexChangeEvent.CARET_CHANGE</codeph> 常量为 <codeph>caretChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值，指示处于焦点的当前项目将要更改。 
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>inputType</codeph></entry><entry>指示此事件是否是由鼠标或键盘交互操作导致的。</entry></row><row><entry><codeph>newIndex</codeph></entry><entry>更改后所选项的从零开始的索引。</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>更改前所选项的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>IndexChangeEvent.CARET_CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:IndexChangeEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
      IndexChangeEvent.CHANGE 常量可为 change 事件定义事件对象的 type 属性的值，指示索引已更改，比如，当基于 List 的控件更改其选择内容时即进行了更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>IndexChangeEvent.CHANGE</codeph> 常量可为 <codeph>change</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示索引已更改，比如，当基于 List 的控件更改其选择内容时即进行了更改。 
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>inputType</codeph></entry><entry>指示此事件是否是由鼠标或键盘交互操作导致的。</entry></row><row><entry><codeph>newIndex</codeph></entry><entry>进行更改之后的从零开始的索引。</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>进行更改之前的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>IndexChangeEvent.CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:IndexChangeEvent:CHANGING"><apiName>CHANGING</apiName><shortdesc>
      IndexChangeEvent.CHANGING 常量为 changing 事件定义事件对象的 type 属性值，指示当前选择将要更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>changing</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>IndexChangeEvent.CHANGING</codeph> 常量为 <codeph>changing</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值，指示当前选择将要更改。 
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>inputType</codeph></entry><entry>指示此事件是否是由鼠标或键盘交互操作导致的。</entry></row><row><entry><codeph>newIndex</codeph></entry><entry>更改后所选项的从零开始的索引。</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>更改前所选项的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>IndexChangeEvent.CHANGING</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:IndexChangeEvent:newIndex"><apiName>newIndex</apiName><shortdesc>
      进行更改之后的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      进行更改之后的从零开始的索引。对于 <codeph>change</codeph> 事件，它是当前子项的索引。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:IndexChangeEvent:oldIndex"><apiName>oldIndex</apiName><shortdesc>
      进行更改之前的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      进行更改之前的从零开始的索引。对于 <codeph>change</codeph> 事件，它是上一子项的索引。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:TrackBaseEvent"><apiName>TrackBaseEvent</apiName><shortdesc>
  表示从 TrackBase 组件分派的事件
  
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  表示从 TrackBase 组件分派的事件
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.events:TrackBaseEvent:THUMB_DRAG_thumbDrag"><apiName>thumbDrag</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TrackBaseEvent:THUMB_DRAG</apiEventType><adobeApiEventClassifier>spark.events:TrackBaseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TrackBaseEvent:THUMB_PRESS_thumbPress"><apiName>thumbPress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TrackBaseEvent:THUMB_PRESS</apiEventType><adobeApiEventClassifier>spark.events:TrackBaseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TrackBaseEvent:THUMB_RELEASE_thumbRelease"><apiName>thumbRelease</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TrackBaseEvent:THUMB_RELEASE</apiEventType><adobeApiEventClassifier>spark.events:TrackBaseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:TrackBaseEvent:TrackBaseEvent"><apiName>TrackBaseEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
           </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
           </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:TrackBaseEvent:THUMB_DRAG"><apiName>THUMB_DRAG</apiName><shortdesc>
      TrackBaseEvent.THUMB_DRAG 常量可为 thumbDrag 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbDrag</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TrackBaseEvent.THUMB_DRAG</codeph> 常量可为 <codeph>thumbDrag</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TrackBaseEvent:THUMB_PRESS"><apiName>THUMB_PRESS</apiName><shortdesc>
      TrackBaseEvent.THUMB_PRESS 常量可为 thumbPress 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbPress</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TrackBaseEvent.THUMB_PRESS</codeph> 常量可为 <codeph>thumbPress</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TrackBaseEvent:THUMB_RELEASE"><apiName>THUMB_RELEASE</apiName><shortdesc>
      TrackBaseEvent.THUMB_RELEASE 常量可为 thumbRelease 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbRelease</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TrackBaseEvent.THUMB_RELEASE</codeph> 常量可为 <codeph>thumbRelease</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:RendererExistenceEvent"><apiName>RendererExistenceEvent</apiName><shortdesc>
  RendererExistenceEvent 类表示在添加或删除 Spark DataGroup 的渲染器时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  RendererExistenceEvent 类表示在添加或删除 Spark DataGroup 的渲染器时分派的事件。
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link></related-links><adobeApiEvent id="spark.events:RendererExistenceEvent:RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:RendererExistenceEvent:RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events:RendererExistenceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:RendererExistenceEvent:RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:RendererExistenceEvent:RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events:RendererExistenceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:RendererExistenceEvent:RendererExistenceEvent"><apiName>RendererExistenceEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
           </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
           </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
           </apiDesc></apiParam><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiData>null</apiData><apiDesc>对已添加或删除的项呈示器的引用。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>数据提供程序中已添加或删除渲染器的位置处的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>渲染器正在进行可视化的数据项目。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:RendererExistenceEvent:RENDERER_ADD"><apiName>RENDERER_ADD</apiName><shortdesc>
      RendererExistenceEvent.RENDERER_ADD 常量可为 rendererAdd 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rendererAdd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>RendererExistenceEvent.RENDERER_ADD</codeph> 常量可为 <codeph>rendererAdd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>data</codeph></entry><entry>渲染器正在进行可视化的数据项目。</entry></row><row><entry><codeph>index</codeph></entry><entry>已添加的渲染器的数据提供程序索引。</entry></row><row><entry><codeph>renderer</codeph></entry><entry>包含对已添加的呈现器的引用</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:RendererExistenceEvent:RENDERER_REMOVE"><apiName>RENDERER_REMOVE</apiName><shortdesc>
      RendererExistenceEvent.RENDERER_REMOVE 常量可为 rendererRemove 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rendererRemove</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>RendererExistenceEvent.RENDERER_REMOVE</codeph> 常量可为 <codeph>rendererRemove</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
           <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>data</codeph></entry><entry>渲染器当时正在进行可视化的数据项目。</entry></row><row><entry><codeph>index</codeph></entry><entry>正在删除的渲染器的数据提供程序索引。</entry></row><row><entry><codeph>renderer</codeph></entry><entry>包含对将要删除的呈现器的引用。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:RendererExistenceEvent:data"><apiName>data</apiName><shortdesc>
      渲染器的数据项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      渲染器的数据项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:RendererExistenceEvent:index"><apiName>index</apiName><shortdesc>
      指向已添加或删除项呈示器的位置的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      指向已添加或删除项呈示器的位置的索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:RendererExistenceEvent:renderer"><apiName>renderer</apiName><shortdesc>
      对已添加或删除的项呈示器的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      对已添加或删除的项呈示器的引用。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:TitleWindowBoundsEvent"><apiName>TitleWindowBoundsEvent</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TitleWindow"><linktext>spark.components.TitleWindow</linktext></link></related-links><adobeApiEvent id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TitleWindowBoundsEvent:WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events:TitleWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events:TitleWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events:TitleWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TitleWindowBoundsEvent:WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events:TitleWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:TitleWindowBoundsEvent:TitleWindowBoundsEvent"><apiName>TitleWindowBoundsEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>beforeBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>操作之前的窗口范围。<codeph/>否则，它是发生更改之前的界限。
     
      </apiDesc></apiParam><apiParam><apiItemName>afterBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>操作之后的窗口范围。<codeph/>否则，它是当前界限。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE"><apiName>WINDOW_MOVE</apiName><shortdesc>
      TitleWindowBoundsEvent.WINDOW_MOVE 常量可为 windowMove 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>windowMove</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TitleWindowBoundsEvent.WINDOW_MOVE</codeph> 常量可为 <codeph>windowMove</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>对象的先前界限。</entry></row><row><entry><codeph>afterBounds</codeph></entry><entry>对象的当前边界。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_END"><apiName>WINDOW_MOVE_END</apiName><shortdesc>
      TitleWindowBoundsEvent.WINDOW_MOVE_END 常量可为 windowMoveEnd 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>windowMoveEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TitleWindowBoundsEvent.WINDOW_MOVE_END</codeph> 常量可为 <codeph>windowMoveEnd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>对象的起始边界。</entry></row><row><entry><codeph>afterBounds</codeph></entry><entry>对象的最终边界。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_START"><apiName>WINDOW_MOVE_START</apiName><shortdesc>
      TitleWindowBoundsEvent.WINDOW_MOVE_START 常量可为 windowMoveStart 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>windowMoveStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TitleWindowBoundsEvent.WINDOW_MOVE_START</codeph> 常量可为 <codeph>windowMoveStart</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>对象的起始边界。</entry></row><row><entry><codeph>afterBounds</codeph></entry><entry>null</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVING"><apiName>WINDOW_MOVING</apiName><shortdesc>
      TitleWindowBoundsEvent.WINDOW_MOVING 常量可为 windowMoving 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>windowMoving</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TitleWindowBoundsEvent.WINDOW_MOVING</codeph> 常量可为 <codeph>windowMoving</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>对象的当前边界。</entry></row><row><entry><codeph>afterBounds</codeph></entry><entry/></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:afterBounds"><apiName>afterBounds</apiName><shortdesc>
      操作之后的对象边界。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      操作之后的对象边界。<codeph/>否则，它是当前界限。
     
      <p/>
     
      <ul>
        <li><codeph/></li>
        <li><codeph/></li>
        <li><codeph/></li>
        <li><codeph/></li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:beforeBounds"><apiName>beforeBounds</apiName><shortdesc>
      操作之前的对象边界。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      操作之前的对象边界。<codeph/>否则，它是发生更改之前的界限。
     
      <p/>
     
      <ul>
        <li><codeph/></li>
        <li><codeph/></li>
        <li><codeph/></li>
        <li><codeph/></li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:VideoEvent"><apiName>VideoEvent</apiName><shortdesc>
  VideoEvent 类表示传递到视频控件分派的事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoEvent 类表示传递到视频控件分派的事件的事件侦听器的事件对象。
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link><link href="spark.primitives.xml#VideoElement"><linktext>spark.primitives.VideoElement</linktext></link></related-links><adobeApiEvent id="spark.events:VideoEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:VideoEvent:CLOSE</apiEventType><adobeApiEventClassifier>spark.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:VideoEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:VideoEvent:COMPLETE</apiEventType><adobeApiEventClassifier>spark.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:VideoEvent:METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:VideoEvent:METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>spark.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:VideoEvent:PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:VideoEvent:PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>spark.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:VideoEvent:READY_ready"><apiName>ready</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:VideoEvent:READY</apiEventType><adobeApiEventClassifier>spark.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:VideoEvent:VideoEvent"><apiName>VideoEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
           </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
           </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
           </apiDesc></apiParam><apiParam><apiItemName>playheadTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>事件发生时播放头的位置。   
           </apiDesc></apiParam><apiParam><apiItemName>metadataInfo</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>具有描述 FLV 文件的属性的元数据信息对象。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:VideoEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
      VideoEvent.CLOSE 常量可为 close 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>VideoEvent.CLOSE</codeph> 常量可为 <codeph>close</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>metadataInfo</codeph></entry><entry>如果事件是从新的元数据触发的，则为描述 FLV 文件的对象。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:VideoEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
      VideoEvent.COMPLETE 常量可为 complete 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>VideoEvent.COMPLETE</codeph> 常量可为 <codeph>complete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>metadataInfo</codeph></entry><entry>如果事件是从新的元数据触发的，则为描述 FLV 文件的对象。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:VideoEvent:METADATA_RECEIVED"><apiName>METADATA_RECEIVED</apiName><shortdesc>
     VideoEvent.METADATA_RECEIVED 常量可为 metadataReceived 事件定义 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>metadataReceived</apiData><apiType value="String"/></apiValueDef><apiDesc>
     VideoEvent.METADATA_RECEIVED 常量可为 <codeph>metadataReceived</codeph> 事件定义 <codeph>type</codeph> 属性的值。
          <p>此事件具有以下属性：</p>
     <adobetable class="innertable">
         
         
         
         
         
         
           
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>metadataInfo</codeph></entry><entry>如果事件是从新的元数据触发的，则为描述 FLV 文件的对象。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:VideoEvent:PLAYHEAD_UPDATE"><apiName>PLAYHEAD_UPDATE</apiName><shortdesc>
      VideoEvent.PLAYHEAD_UPDATE 常量可为 playheadUpdate 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playheadUpdate</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>VideoEvent.PLAYHEAD_UPDATE</codeph> 常量可为 <codeph>playheadUpdate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>metadataInfo</codeph></entry><entry>如果事件是从新的元数据触发的，则为描述 FLV 文件的对象。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:VideoEvent:READY"><apiName>READY</apiName><shortdesc>
      VideoEvent.READY 常量可为 ready 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>VideoEvent.READY</codeph> 常量可为 <codeph>ready</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>metadataInfo</codeph></entry><entry>如果事件是从新的元数据触发的，则为描述 FLV 文件的对象。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:VideoEvent:metadataInfo"><apiName>metadataInfo</apiName><shortdesc>
      具有描述 FLV 文件的属性的元数据信息对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      具有描述 FLV 文件的属性的元数据信息对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:VideoEvent:playheadTime"><apiName>playheadTime</apiName><shortdesc>
      事件发生时视频控件播放头的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      事件发生时视频控件播放头的位置。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:TextOperationEvent"><apiName>TextOperationEvent</apiName><shortdesc>
  TextOperationEvent 类表示因用户操作（例如，插入字符、退格、粘贴、更改属性等）而改变文本内容时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextOperationEvent 类表示因用户操作（例如，插入字符、退格、粘贴、更改属性等）而改变文本内容时分派的事件。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.events:TextOperationEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TextOperationEvent:CHANGE</apiEventType><adobeApiEventClassifier>spark.events:TextOperationEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TextOperationEvent:CHANGING_changing"><apiName>changing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TextOperationEvent:CHANGING</apiEventType><adobeApiEventClassifier>spark.events:TextOperationEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:TextOperationEvent:TextOperationEvent"><apiName>TextOperationEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>operation</apiItemName><apiType value="flashx.textLayout.operations:FlowOperation"/><apiData>null</apiData><apiDesc>表示正在由用户对文本执行的编辑操作的 FlowOperation 对象。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:TextOperationEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
      TextOperationEvent.CHANGE 常量可为 change 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TextOperationEvent.CHANGE</codeph> 常量可为 <codeph>change</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>operation</codeph></entry><entry>描述正在由用户对文本执行的编辑操作的 FlowOperation 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TextOperationEvent:CHANGING"><apiName>CHANGING</apiName><shortdesc>
      TextOperationEvent.CHANGING 常量可为 changing 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>changing</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>TextOperationEvent.CHANGING</codeph> 常量可为 <codeph>changing</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>operation</codeph></entry><entry>描述正在由用户对文本执行的编辑操作的 FlowOperation 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TextOperationEvent:operation"><apiName>operation</apiName><shortdesc>
      表示正在由用户对文本执行的编辑操作的 FlowOperation 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flashx.textLayout.operations:FlowOperation"/></apiValueDef><apiDesc>
      表示正在由用户对文本执行的编辑操作的 FlowOperation 对象。
	 
	  <p>这可能是 InsertTextOperation、DeleteTextOperation、SplitParagraphOperation、CutOperation、PasteOperation、UndoOperation 等等。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>